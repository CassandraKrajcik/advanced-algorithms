{
  "api/Advanced.Algorithms.Binary.BaseConversion.html": {
    "href": "api/Advanced.Algorithms.Binary.BaseConversion.html",
    "title": "Class BaseConversion | Advanced Algorithms",
    "keywords": "Class BaseConversion Base conversion implementation. Inheritance Object BaseConversion Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Binary Assembly : Advanced.Algorithms.dll Syntax public class BaseConversion Methods Convert(String, String, String, Int32) Converts base of given number to the target base. Declaration public static string Convert(string srcNumber, string srcBaseChars, string dstBaseChars, int precision = 32) Parameters Type Name Description String srcNumber Input number in source base system. String srcBaseChars Source base system characters in increasing order. For example 0123456789 for base 10. String dstBaseChars Destination base system characters in increasing order. For example 01 for base 2. Int32 precision Required precision when dealing with fractions. Defaults to 32 places. Returns Type Description String The result in target base as a string."
  },
  "api/Advanced.Algorithms.Binary.Gcd.html": {
    "href": "api/Advanced.Algorithms.Binary.Gcd.html",
    "title": "Class Gcd | Advanced Algorithms",
    "keywords": "Class Gcd GCD without division or mod operators but using substraction. Inheritance Object Gcd Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Binary Assembly : Advanced.Algorithms.dll Syntax public class Gcd Methods Find(Int32, Int32) Declaration public static int Find(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Binary.html": {
    "href": "api/Advanced.Algorithms.Binary.html",
    "title": "Namespace Advanced.Algorithms.Binary | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Binary Classes BaseConversion Base conversion implementation. Gcd GCD without division or mod operators but using substraction. Logarithm Logarithm calculator."
  },
  "api/Advanced.Algorithms.Binary.Logarithm.html": {
    "href": "api/Advanced.Algorithms.Binary.Logarithm.html",
    "title": "Class Logarithm | Advanced Algorithms",
    "keywords": "Class Logarithm Logarithm calculator. Inheritance Object Logarithm Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Binary Assembly : Advanced.Algorithms.dll Syntax public class Logarithm Methods CalcBase10LogFloor(Int32) Declaration public static int CalcBase10LogFloor(int x) Parameters Type Name Description Int32 x Returns Type Description Int32 CalcBase2LogFloor(Int32) Declaration public static int CalcBase2LogFloor(int x) Parameters Type Name Description Int32 x Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Combinatorics.Combination.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.Combination.html",
    "title": "Class Combination | Advanced Algorithms",
    "keywords": "Class Combination Combinations computer. Inheritance Object Combination Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Combinatorics Assembly : Advanced.Algorithms.dll Syntax public class Combination Methods Find<T>(List<T>, Int32, Boolean) Declaration public static List<List<T>> Find<T>(List<T> input, int r, bool withRepetition) Parameters Type Name Description List <T> input Int32 r Boolean withRepetition Returns Type Description List < List <T>> Type Parameters Name Description T"
  },
  "api/Advanced.Algorithms.Combinatorics.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.html",
    "title": "Namespace Advanced.Algorithms.Combinatorics | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Combinatorics Classes Combination Combinations computer. Permutation Permutation computer. Subset Subset computer."
  },
  "api/Advanced.Algorithms.Combinatorics.Permutation.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.Permutation.html",
    "title": "Class Permutation | Advanced Algorithms",
    "keywords": "Class Permutation Permutation computer. Inheritance Object Permutation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Combinatorics Assembly : Advanced.Algorithms.dll Syntax public class Permutation Methods Find<T>(List<T>, Int32, Boolean) Declaration public static List<List<T>> Find<T>(List<T> input, int r, bool withRepetition = false) Parameters Type Name Description List <T> input Int32 r Boolean withRepetition Returns Type Description List < List <T>> Type Parameters Name Description T"
  },
  "api/Advanced.Algorithms.Combinatorics.Subset.html": {
    "href": "api/Advanced.Algorithms.Combinatorics.Subset.html",
    "title": "Class Subset | Advanced Algorithms",
    "keywords": "Class Subset Subset computer. Inheritance Object Subset Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Combinatorics Assembly : Advanced.Algorithms.dll Syntax public class Subset Methods Find<T>(List<T>) Declaration public static List<List<T>> Find<T>(List<T> input) Parameters Type Name Description List <T> input Returns Type Description List < List <T>> Type Parameters Name Description T"
  },
  "api/Advanced.Algorithms.Compression.html": {
    "href": "api/Advanced.Algorithms.Compression.html",
    "title": "Namespace Advanced.Algorithms.Compression | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Compression Classes HuffmanCoding<T> A huffman coding implementation using Fibonacci Min Heap."
  },
  "api/Advanced.Algorithms.Compression.HuffmanCoding-1.html": {
    "href": "api/Advanced.Algorithms.Compression.HuffmanCoding-1.html",
    "title": "Class HuffmanCoding<T> | Advanced Algorithms",
    "keywords": "Class HuffmanCoding<T> A huffman coding implementation using Fibonacci Min Heap. Inheritance Object HuffmanCoding<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Compression Assembly : Advanced.Algorithms.dll Syntax public class HuffmanCoding<T> Type Parameters Name Description T Methods Compress(T[]) Returns a dictionary of chosen encoding bytes for each distinct T. Declaration public Dictionary<T, byte[]> Compress(T[] input) Parameters Type Name Description T[] input Returns Type Description Dictionary <T, Byte []>"
  },
  "api/Advanced.Algorithms.DataStructures.AVLTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.AVLTree-1.html",
    "title": "Class AVLTree<T> | Advanced Algorithms",
    "keywords": "Class AVLTree<T> An AVL tree implementation. Inheritance Object AVLTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class AVLTree<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors AVLTree(Boolean) Declaration public AVLTree(bool enableNodeLookUp = false) Parameters Type Name Description Boolean enableNodeLookUp Enabling lookup will fasten deletion/insertion/exists operations at the cost of additional space. AVLTree(IEnumerable<T>, Boolean) Initialize the BST with given sorted keys. Time complexity: O(n). Declaration public AVLTree(IEnumerable<T> sortedCollection, bool enableNodeLookUp = false) Parameters Type Name Description IEnumerable <T> sortedCollection The initial sorted collection. Boolean enableNodeLookUp Enabling lookup will fasten deletion/insertion/exists operations at the cost of additional space. Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods AsEnumerableDesc() Descending enumerable. Declaration public IEnumerable<T> AsEnumerableDesc() Returns Type Description IEnumerable <T> Contains(T) Time complexity: O(log(n)). Declaration public bool Contains(T value) Parameters Type Name Description T value Returns Type Description Boolean Delete(T) Time complexity: O(log(n)). Declaration public void Delete(T value) Parameters Type Name Description T value ElementAt(Int32) Time complexity: O(log(n)) Declaration public T ElementAt(int index) Parameters Type Name Description Int32 index Returns Type Description T FindMax() Time complexity: O(log(n)). Declaration public T FindMax() Returns Type Description T FindMin() Time complexity: O(log(n)). Declaration public T FindMin() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetEnumeratorDesc() Declaration public IEnumerator<T> GetEnumeratorDesc() Returns Type Description IEnumerator <T> HasItem(T) Time complexity: O(log(n)) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean IndexOf(T) Time complexity: O(log(n)) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 Insert(T) Time complexity: O(log(n)) Declaration public void Insert(T value) Parameters Type Name Description T value NextHigher(T) Get the next higher value to given value in this BST. Time complexity: O(log(n)) Declaration public T NextHigher(T value) Parameters Type Name Description T value Returns Type Description T NextLower(T) Get the next lower value to given value in this BST. Time complexity: O(log(n)) Declaration public T NextLower(T value) Parameters Type Name Description T value Returns Type Description T RemoveAt(Int32) Time complexity: O(log(n)) Declaration public T RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.BHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BHeap-1.html",
    "title": "Class BHeap<T> | Advanced Algorithms",
    "keywords": "Class BHeap<T> A binary heap implementation. Inheritance Object BHeap<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BHeap<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors BHeap(SortDirection) Declaration public BHeap(SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description SortDirection sortDirection BHeap(SortDirection, IComparer<T>) Declaration public BHeap(SortDirection sortDirection, IComparer<T> comparer) Parameters Type Name Description SortDirection sortDirection IComparer <T> comparer BHeap(SortDirection, IEnumerable<T>) Declaration public BHeap(SortDirection sortDirection, IEnumerable<T> initial) Parameters Type Name Description SortDirection sortDirection IEnumerable <T> initial BHeap(SortDirection, IEnumerable<T>, IComparer<T>) Time complexity: O(n) if initial is provided. Otherwise O(1). Declaration public BHeap(SortDirection sortDirection, IEnumerable<T> initial, IComparer<T> comparer) Parameters Type Name Description SortDirection sortDirection IEnumerable <T> initial The initial items in the heap. IComparer <T> comparer Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T) Time complexity: O(n). Declaration public void Delete(T value) Parameters Type Name Description T value Exists(T) Time complexity: O(n). Declaration public bool Exists(T value) Parameters Type Name Description T value Returns Type Description Boolean Extract() Time complexity: O(log(n)). Declaration public T Extract() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Insert(T) Time complexity: O(log(n)). Declaration public void Insert(T newItem) Parameters Type Name Description T newItem Peek() Time complexity: O(1). Declaration public T Peek() Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.BinaryTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BinaryTree-1.html",
    "title": "Class BinaryTree<T> | Advanced Algorithms",
    "keywords": "Class BinaryTree<T> A binary tree implementation using pointers. Inheritance Object BinaryTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BinaryTree<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Children(T) Time complexity: O(n) Declaration public IEnumerable<T> Children(T value) Parameters Type Name Description T value Returns Type Description IEnumerable <T> Delete(T) Only deletes unambiguous nodes (a node with two children cannot be deleted unambiguously). Time complexity: O(n) Declaration public void Delete(T value) Parameters Type Name Description T value GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetHeight() Time complexity: O(n) Declaration public int GetHeight() Returns Type Description Int32 HasItem(T) Time complexity: O(n) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T, T) Declaration public void Insert(T parent, T child) Parameters Type Name Description T parent T child Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.BinomialHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BinomialHeap-1.html",
    "title": "Class BinomialHeap<T> | Advanced Algorithms",
    "keywords": "Class BinomialHeap<T> A binomial minMax heap implementation. Inheritance Object BinomialHeap<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BinomialHeap<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors BinomialHeap(SortDirection) Declaration public BinomialHeap(SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description SortDirection sortDirection Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Extract() Time complexity: O(log(n)). Declaration public T Extract() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Insert(T) Time complexity: O(log(n)). Declaration public void Insert(T newItem) Parameters Type Name Description T newItem Merge(BinomialHeap<T>) Time complexity: O(log(n)). Declaration public void Merge(BinomialHeap<T> binomialHeap) Parameters Type Name Description BinomialHeap <T> binomialHeap The heap to union with. Peek() Time complexity: O(log(n)). Declaration public T Peek() Returns Type Description T UpdateKey(T, T) Time complexity: O(log(n)). Declaration public void UpdateKey(T currentValue, T newValue) Parameters Type Name Description T currentValue The value to update. T newValue The updated new value. Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.BloomFilter-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BloomFilter-1.html",
    "title": "Class BloomFilter<T> | Advanced Algorithms",
    "keywords": "Class BloomFilter<T> A simple bloom filter implementation. Inheritance Object BloomFilter<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BloomFilter<T> Type Parameters Name Description T Constructors BloomFilter(Int32) Higher the size lower the collision and failure probablity. Declaration public BloomFilter(int size) Parameters Type Name Description Int32 size Methods AddKey(T) Time complexity: O(1). Declaration public void AddKey(T key) Parameters Type Name Description T key KeyExists(T) Time complexity: O(1). Declaration public bool KeyExists(T key) Parameters Type Name Description T key Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.DataStructures.BpTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BpTree-1.html",
    "title": "Class BpTree<T> | Advanced Algorithms",
    "keywords": "Class BpTree<T> A B+ tree implementation. Inheritance Object BpTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BpTree<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors BpTree(Int32) Declaration public BpTree(int maxKeysPerNode = 3) Parameters Type Name Description Int32 maxKeysPerNode Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Max Time complexity: O(1). Declaration public T Max { get; } Property Value Type Description T Min Time complexity: O(1). Declaration public T Min { get; } Property Value Type Description T Methods AsEnumerableDesc() Descending enumerable. Declaration public IEnumerable<T> AsEnumerableDesc() Returns Type Description IEnumerable <T> Delete(T) Time complexity: O(log(n)). Declaration public void Delete(T value) Parameters Type Name Description T value GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetEnumeratorDesc() Declaration public IEnumerator<T> GetEnumeratorDesc() Returns Type Description IEnumerator <T> HasItem(T) Time complexity: O(log(n)). Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T) Time complexity: O(log(n)). Declaration public void Insert(T newValue) Parameters Type Name Description T newValue Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.BST-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BST-1.html",
    "title": "Class BST<T> | Advanced Algorithms",
    "keywords": "Class BST<T> A binary search tree implementation. Inheritance Object BST<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BST<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors BST() Declaration public BST() BST(IEnumerable<T>) Initialize the BST with given sorted keys. Time complexity: O(n). Declaration public BST(IEnumerable<T> sortedCollection) Parameters Type Name Description IEnumerable <T> sortedCollection Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods AsEnumerableDesc() Descending enumerable. Declaration public IEnumerable<T> AsEnumerableDesc() Returns Type Description IEnumerable <T> Delete(T) Time complexity: O(n) Declaration public void Delete(T value) Parameters Type Name Description T value ElementAt(Int32) Time complexity: O(n) Declaration public T ElementAt(int index) Parameters Type Name Description Int32 index Returns Type Description T FindMax() Time complexity: O(n) Declaration public T FindMax() Returns Type Description T FindMin() Time complexity: O(n) Declaration public T FindMin() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetEnumeratorDesc() Declaration public IEnumerator<T> GetEnumeratorDesc() Returns Type Description IEnumerator <T> HasItem(T) Time complexity: O(n) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean IndexOf(T) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 Insert(T) Time complexity: O(n) Declaration public void Insert(T value) Parameters Type Name Description T value NextHigher(T) Get the next higher value to given value in this BST. Time complexity: O(n) Declaration public T NextHigher(T value) Parameters Type Name Description T value Returns Type Description T NextLower(T) Get the next lower value to given value in this BST. Time complexity: O(n) Declaration public T NextLower(T value) Parameters Type Name Description T value Returns Type Description T RemoveAt(Int32) Time complexity: O(n) Declaration public T RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.BTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.BTree-1.html",
    "title": "Class BTree<T> | Advanced Algorithms",
    "keywords": "Class BTree<T> A B-tree implementation. Inheritance Object BTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class BTree<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors BTree(Int32) Declaration public BTree(int maxKeysPerNode) Parameters Type Name Description Int32 maxKeysPerNode Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Max Time complexity: O(log(n)). Declaration public T Max { get; } Property Value Type Description T Min Time complexity: O(log(n)). Declaration public T Min { get; } Property Value Type Description T Methods Delete(T) Time complexity: O(log(n)). Declaration public void Delete(T value) Parameters Type Name Description T value GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> HasItem(T) Time complexity: O(log(n)). Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T) Time complexity: O(log(n)). Declaration public void Insert(T newValue) Parameters Type Name Description T newValue Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.CircularLinkedList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.CircularLinkedList-1.html",
    "title": "Class CircularLinkedList<T> | Advanced Algorithms",
    "keywords": "Class CircularLinkedList<T> A circular linked list implementation. Inheritance Object CircularLinkedList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class CircularLinkedList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Fields ReferenceNode Declaration public CircularLinkedListNode<T> ReferenceNode Field Value Type Description CircularLinkedListNode <T> Methods Clear() Time complexity: O(1). Declaration public void Clear() Delete(T) search and delete. Time complexity:O(n). Declaration public void Delete(T data) Parameters Type Name Description T data Delete(CircularLinkedListNode<T>) Time complexity: O(1) Declaration public void Delete(CircularLinkedListNode<T> current) Parameters Type Name Description CircularLinkedListNode <T> current GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Insert(T) Marks this data as the new reference node after insertion. Like insert first assuming that current reference node as head. Time complexity: O(1). Declaration public CircularLinkedListNode<T> Insert(T data) Parameters Type Name Description T data Returns Type Description CircularLinkedListNode <T> IsEmpty() Time complexity: O(1). Declaration public bool IsEmpty() Returns Type Description Boolean Union(CircularLinkedList<T>) Time complexity: O(1). Declaration public void Union(CircularLinkedList<T> newList) Parameters Type Name Description CircularLinkedList <T> newList Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.CircularLinkedListNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.CircularLinkedListNode-1.html",
    "title": "Class CircularLinkedListNode<T> | Advanced Algorithms",
    "keywords": "Class CircularLinkedListNode<T> Circular linked list node. Inheritance Object CircularLinkedListNode<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class CircularLinkedListNode<T> Type Parameters Name Description T Constructors CircularLinkedListNode(T) Declaration public CircularLinkedListNode(T data) Parameters Type Name Description T data Fields Data Declaration public T Data Field Value Type Description T Next Declaration public CircularLinkedListNode<T> Next Field Value Type Description CircularLinkedListNode <T> Previous Declaration public CircularLinkedListNode<T> Previous Field Value Type Description CircularLinkedListNode <T>"
  },
  "api/Advanced.Algorithms.DataStructures.DaryHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DaryHeap-1.html",
    "title": "Class DaryHeap<T> | Advanced Algorithms",
    "keywords": "Class DaryHeap<T> A D-ary minMax heap implementation. Inheritance Object DaryHeap<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DaryHeap<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors DaryHeap(Int32, SortDirection, IEnumerable<T>) Time complexity: O(n) when initial is provided otherwise O(1). Declaration public DaryHeap(int k, SortDirection sortDirection = SortDirection.Ascending, IEnumerable<T> initial = null) Parameters Type Name Description Int32 k The number of children per heap node. SortDirection sortDirection IEnumerable <T> initial The initial items if any. Fields Count Declaration public int Count Field Value Type Description Int32 Methods Extract() Time complexity: O(log(n) base K). Declaration public T Extract() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Insert(T) Time complexity: O(log(n) base K). Declaration public void Insert(T newItem) Parameters Type Name Description T newItem Peek() Time complexity: O(1). Declaration public T Peek() Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.DisJointSet-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DisJointSet-1.html",
    "title": "Class DisJointSet<T> | Advanced Algorithms",
    "keywords": "Class DisJointSet<T> A disjoint set implementation. Inheritance Object DisJointSet<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DisJointSet<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods FindSet(T) Returns the reference member of the set where this member is part of. Time complexity: log(n). Declaration public T FindSet(T member) Parameters Type Name Description T member Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> MakeSet(T) Creates a new set with given member. Time complexity: log(n). Declaration public void MakeSet(T member) Parameters Type Name Description T member Union(T, T) Union's given member's sets if given members are in differant sets. Otherwise does nothing. Time complexity: log(n). Declaration public void Union(T memberA, T memberB) Parameters Type Name Description T memberA T memberB Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.DoublyLinkedList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DoublyLinkedList-1.html",
    "title": "Class DoublyLinkedList<T> | Advanced Algorithms",
    "keywords": "Class DoublyLinkedList<T> A doubly linked list implementation. Inheritance Object DoublyLinkedList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DoublyLinkedList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Fields Head Declaration public DoublyLinkedListNode<T> Head Field Value Type Description DoublyLinkedListNode <T> Tail Declaration public DoublyLinkedListNode<T> Tail Field Value Type Description DoublyLinkedListNode <T> Methods Clear() Time complexity: O(1). Declaration public void Clear() Delete(T) Time complexity: O(n). Declaration public void Delete(T data) Parameters Type Name Description T data Delete(DoublyLinkedListNode<T>) Delete the given node. Time complexity: O(n). Declaration public void Delete(DoublyLinkedListNode<T> node) Parameters Type Name Description DoublyLinkedListNode <T> node DeleteFirst() Time complexity: O(1). Declaration public T DeleteFirst() Returns Type Description T DeleteLast() Delete tail node. Time complexity: O(1) Declaration public T DeleteLast() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> InsertAfter(DoublyLinkedListNode<T>, DoublyLinkedListNode<T>) Insert right after this node. Time complexity: O(1). Declaration public DoublyLinkedListNode<T> InsertAfter(DoublyLinkedListNode<T> node, DoublyLinkedListNode<T> data) Parameters Type Name Description DoublyLinkedListNode <T> node DoublyLinkedListNode <T> data Returns Type Description DoublyLinkedListNode <T> InsertBefore(DoublyLinkedListNode<T>, DoublyLinkedListNode<T>) Insert right before this node. Time complexity:O(1). Declaration public DoublyLinkedListNode<T> InsertBefore(DoublyLinkedListNode<T> node, DoublyLinkedListNode<T> data) Parameters Type Name Description DoublyLinkedListNode <T> node DoublyLinkedListNode <T> data Returns Type Description DoublyLinkedListNode <T> InsertFirst(T) Time complexity: O(1). Declaration public DoublyLinkedListNode<T> InsertFirst(T data) Parameters Type Name Description T data Returns Type Description DoublyLinkedListNode <T> The new node. InsertLast(T) Time complexity:O(1). Declaration public DoublyLinkedListNode<T> InsertLast(T data) Parameters Type Name Description T data Returns Type Description DoublyLinkedListNode <T> IsEmpty() Time complexity: O(1). Declaration public bool IsEmpty() Returns Type Description Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.DoublyLinkedListNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.DoublyLinkedListNode-1.html",
    "title": "Class DoublyLinkedListNode<T> | Advanced Algorithms",
    "keywords": "Class DoublyLinkedListNode<T> Doubly linked list node. Inheritance Object DoublyLinkedListNode<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class DoublyLinkedListNode<T> Type Parameters Name Description T Constructors DoublyLinkedListNode(T) Declaration public DoublyLinkedListNode(T data) Parameters Type Name Description T data Fields Data Declaration public T Data Field Value Type Description T Next Declaration public DoublyLinkedListNode<T> Next Field Value Type Description DoublyLinkedListNode <T> Previous Declaration public DoublyLinkedListNode<T> Previous Field Value Type Description DoublyLinkedListNode <T>"
  },
  "api/Advanced.Algorithms.DataStructures.FenwickTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.FenwickTree-1.html",
    "title": "Class FenwickTree<T> | Advanced Algorithms",
    "keywords": "Class FenwickTree<T> A Fenwick Tree (binary indexed tree) implementation for prefix sum. Inheritance Object FenwickTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class FenwickTree<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors FenwickTree(T[], Func<T, T, T>) constructs a Fenwick tree using the specified sum operation function. Time complexity: O(nLog(n)). Declaration public FenwickTree(T[] input, Func<T, T, T> sumOperation) Parameters Type Name Description T[] input Func <T, T, T> sumOperation Methods GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> PrefixSum(Int32) Gets the prefix sum from 0 till the given end index. Time complexity: O(log(n)). Declaration public T PrefixSum(int endIndex) Parameters Type Name Description Int32 endIndex Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.FibonacciHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.FibonacciHeap-1.html",
    "title": "Class FibonacciHeap<T> | Advanced Algorithms",
    "keywords": "Class FibonacciHeap<T> A fibornacci minMax heap implementation. Inheritance Object FibonacciHeap<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class FibonacciHeap<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors FibonacciHeap(SortDirection) Declaration public FibonacciHeap(SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description SortDirection sortDirection Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Extract() Time complexity: O(log(n)). Declaration public T Extract() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Insert(T) Time complexity: O(1). Declaration public void Insert(T newItem) Parameters Type Name Description T newItem Merge(FibonacciHeap<T>) Unions this heap with another. Time complexity: O(1). Declaration public void Merge(FibonacciHeap<T> FibonacciHeap) Parameters Type Name Description FibonacciHeap <T> FibonacciHeap Peek() Time complexity: O(1). Declaration public T Peek() Returns Type Description T UpdateKey(T, T) Update the Heap with new value for this node pointer. Time complexity: O(1). Declaration public void UpdateKey(T currentValue, T newValue) Parameters Type Name Description T currentValue T newValue Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.ArrayList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.ArrayList-1.html",
    "title": "Class ArrayList<T> | Advanced Algorithms",
    "keywords": "Class ArrayList<T> A self expanding array implementation. Inheritance Object ArrayList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public class ArrayList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The datatype of this ArrayList. Constructors ArrayList(IEnumerable<T>) Time complexity: O(1) if initial is empty otherwise O(n). Declaration public ArrayList(IEnumerable<T> initial) Parameters Type Name Description IEnumerable <T> initial Initial values if any. ArrayList(Int32, IEnumerable<T>) Time complexity: O(1) if initial is empty otherwise O(n). Declaration public ArrayList(int initalArraySize = 2, IEnumerable<T> initial = null) Parameters Type Name Description Int32 initalArraySize The initial array size. IEnumerable <T> initial Initial values if any. Properties Item[Int32] Indexed access to array. Time complexity: O(1). Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index The index to write or read. Property Value Type Description T Length Declaration public int Length { get; } Property Value Type Description Int32 Methods Add(T) Add a new item to this array list. Time complexity: O(1) amortized. Declaration public void Add(T item) Parameters Type Name Description T item Clear() Clears the array. Time complexity: O(1). Declaration public void Clear() GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> InsertAt(Int32, T) Declaration public void InsertAt(int index, T item) Parameters Type Name Description Int32 index T item RemoveAt(Int32) Remove the item at given index. Time complexity: O(1) amortized. Declaration public void RemoveAt(int i) Parameters Type Name Description Int32 i The index to remove at. Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.Dictionary-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.Dictionary-2.html",
    "title": "Class Dictionary<K, V> | Advanced Algorithms",
    "keywords": "Class Dictionary<K, V> A dictionary implementation. Inheritance Object Dictionary<K, V> Implements IEnumerable < KeyValuePair <K, V>> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public class Dictionary<K, V> : IEnumerable<KeyValuePair<K, V>>, IEnumerable Type Parameters Name Description K The key datatype. V The value datatype. Constructors Dictionary(DictionaryType, Int32) Declaration public Dictionary(DictionaryType type = DictionaryType.SeparateChaining, int initialBucketSize = 2) Parameters Type Name Description DictionaryType type The dictionary implementation to use. Int32 initialBucketSize The larger the bucket size lesser the collision, but memory matters! Properties Count The number of items in this hashset. Declaration public int Count { get; } Property Value Type Description Int32 Item[K] Get/set value for given key. Time complexity: O(1) amortized. Declaration public V this[K key] { get; set; } Parameters Type Name Description K key Property Value Type Description V Methods Add(K, V) Add a new key for given value. Time complexity: O(1) amortized. Declaration public void Add(K key, V value) Parameters Type Name Description K key The key to add. V value The value for the given key. Clear() Clear the dictionary. Time complexity: O(1). Declaration public void Clear() ContainsKey(K) Does this dictionary contains the given key. Time complexity: O(1) amortized. Declaration public bool ContainsKey(K key) Parameters Type Name Description K key Returns Type Description Boolean True if this dictionary contains the given key. GetEnumerator() Declaration public IEnumerator<KeyValuePair<K, V>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair <K, V>> Remove(K) Remove the given key along with its value. Time complexity: O(1) amortized. Declaration public void Remove(K key) Parameters Type Name Description K key The key to remove. Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.DictionaryType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.DictionaryType.html",
    "title": "Enum DictionaryType | Advanced Algorithms",
    "keywords": "Enum DictionaryType The dictionary implementation type. Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public enum DictionaryType Fields Name Description OpenAddressing SeparateChaining"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.HashSet-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.HashSet-1.html",
    "title": "Class HashSet<T> | Advanced Algorithms",
    "keywords": "Class HashSet<T> A hash table implementation. Inheritance Object HashSet<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public class HashSet<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The value datatype. Constructors HashSet(HashSetType, Int32) Declaration public HashSet(HashSetType type = HashSetType.SeparateChaining, int initialBucketSize = 2) Parameters Type Name Description HashSetType type The hashSet implementation to use. Int32 initialBucketSize The larger the bucket size lesser the collision, but memory matters! Properties Count The number of items in this hashset. Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(T) Add a new value. Time complexity: O(1) amortized. Declaration public void Add(T value) Parameters Type Name Description T value The value to add. Clear() Clear the hashtable. Time complexity: O(1). Declaration public void Clear() Contains(T) Does this hash table contains the given value. Time complexity: O(1) amortized. Declaration public bool Contains(T value) Parameters Type Name Description T value The value to check. Returns Type Description Boolean True if this hashset contains the given value. GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Remove(T) Remove the given value. Time complexity: O(1) amortized. Declaration public void Remove(T value) Parameters Type Name Description T value The value to remove. Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.HashSetType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.HashSetType.html",
    "title": "Enum HashSetType | Advanced Algorithms",
    "keywords": "Enum HashSetType The hash set implementation type. Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public enum HashSetType Fields Name Description OpenAddressing SeparateChaining"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Foundation | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Foundation Classes ArrayList<T> A self expanding array implementation. Dictionary<K, V> A dictionary implementation. HashSet<T> A hash table implementation. OrderedDictionary<K, V> A sorted Dictionary implementation using balanced binary search tree. IEnumerable will enumerate in sorted order. This may be better than regular Dictionary implementation which can give o(K) in worst case (but O(1) amortized when collisions K is avoided). OrderedHashSet<T> A sorted HashSet implementation using balanced binary search tree. IEnumerable will enumerate in sorted order. This may be better than regular HashSet implementation which can give o(K) in worst case (but O(1) amortized when collisions K is avoided). Queue<T> A queue implementation. Stack<T> A stack implementation. Enums DictionaryType The dictionary implementation type. HashSetType The hash set implementation type. QueueType The queue implementation types. StackType The stack implementation types."
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.OrderedDictionary-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.OrderedDictionary-2.html",
    "title": "Class OrderedDictionary<K, V> | Advanced Algorithms",
    "keywords": "Class OrderedDictionary<K, V> A sorted Dictionary implementation using balanced binary search tree. IEnumerable will enumerate in sorted order. This may be better than regular Dictionary implementation which can give o(K) in worst case (but O(1) amortized when collisions K is avoided). Inheritance Object OrderedDictionary<K, V> Implements IEnumerable < KeyValuePair <K, V>> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public class OrderedDictionary<K, V> : IEnumerable<KeyValuePair<K, V>>, IEnumerable where K : IComparable Type Parameters Name Description K The key datatype. V The value datatype. Constructors OrderedDictionary() Declaration public OrderedDictionary() OrderedDictionary(IEnumerable<KeyValuePair<K, V>>) Initialize the dictionary with given key value pairs sorted by key. Time complexity: log(n). Declaration public OrderedDictionary(IEnumerable<KeyValuePair<K, V>> sortedKeyValuePairs) Parameters Type Name Description IEnumerable < KeyValuePair <K, V>> sortedKeyValuePairs Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[K] Get/set value for given key. Time complexity: O(log(n)). Declaration public V this[K key] { get; set; } Parameters Type Name Description K key Property Value Type Description V Methods Add(K, V) Add a new value for given key. Time complexity: O(log(n)). Returns the position (index) of the key in sorted order of this OrderedDictionary. Declaration public int Add(K key, V value) Parameters Type Name Description K key V value Returns Type Description Int32 AsEnumerableDesc() Descending enumerable. Declaration public IEnumerable<KeyValuePair<K, V>> AsEnumerableDesc() Returns Type Description IEnumerable < KeyValuePair <K, V>> ContainsKey(K) Does this dictionary contains the given key. Time complexity: O(log(n)). Declaration public bool ContainsKey(K key) Parameters Type Name Description K key The key to check. Returns Type Description Boolean True if this dictionary contains the given key. ElementAt(Int32) Time complexity: O(log(n)) Declaration public KeyValuePair<K, V> ElementAt(int index) Parameters Type Name Description Int32 index Returns Type Description KeyValuePair <K, V> GetEnumerator() Declaration public IEnumerator<KeyValuePair<K, V>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair <K, V>> GetEnumeratorDesc() Declaration public IEnumerator<KeyValuePair<K, V>> GetEnumeratorDesc() Returns Type Description IEnumerator < KeyValuePair <K, V>> IndexOf(K) Time complexity: O(log(n)) Declaration public int IndexOf(K key) Parameters Type Name Description K key Returns Type Description Int32 Max() Time complexity: O(1). Declaration public KeyValuePair<K, V> Max() Returns Type Description KeyValuePair <K, V> Min() Time complexity: O(log(n)). Declaration public KeyValuePair<K, V> Min() Returns Type Description KeyValuePair <K, V> NextHigher(K) Return the next higher key-value pair after given key in this dictionary. Time complexity: O(log(n)). Declaration public KeyValuePair<K, V> NextHigher(K key) Parameters Type Name Description K key Returns Type Description KeyValuePair <K, V> Null if the given key does'nt exist or next key does'nt exist. NextLower(K) Return the next lower key-value pair before given key in this dictionary. Time complexity: O(log(n)). Declaration public KeyValuePair<K, V> NextLower(K key) Parameters Type Name Description K key Returns Type Description KeyValuePair <K, V> Null if the given key does'nt exist or previous key does'nt exist. Remove(K) Remove the given key if it exists. Time complexity: O(log(n)). Returns the position (index) of the removed key if removed. Otherwise returns -1. Declaration public int Remove(K key) Parameters Type Name Description K key Returns Type Description Int32 RemoveAt(Int32) Remove the element at given index. Time complexity: O(log(n)). Declaration public KeyValuePair<K, V> RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description KeyValuePair <K, V> Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.OrderedHashSet-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.OrderedHashSet-1.html",
    "title": "Class OrderedHashSet<T> | Advanced Algorithms",
    "keywords": "Class OrderedHashSet<T> A sorted HashSet implementation using balanced binary search tree. IEnumerable will enumerate in sorted order. This may be better than regular HashSet implementation which can give o(K) in worst case (but O(1) amortized when collisions K is avoided). Inheritance Object OrderedHashSet<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public class OrderedHashSet<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T The value datatype. Constructors OrderedHashSet() Declaration public OrderedHashSet() OrderedHashSet(IEnumerable<T>) Initialize the sorted hashset with given sorted key collection. Time complexity: log(n). Declaration public OrderedHashSet(IEnumerable<T> sortedKeys) Parameters Type Name Description IEnumerable <T> sortedKeys Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Time complexity: O(log(n)) Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description T Methods Add(T) Add a new key. Time complexity: O(log(n)). Returns the position (index) of the key in sorted order of this OrderedHashSet. Declaration public int Add(T key) Parameters Type Name Description T key Returns Type Description Int32 AsEnumerableDesc() Descending enumerable. Declaration public IEnumerable<T> AsEnumerableDesc() Returns Type Description IEnumerable <T> Contains(T) Does this hash table contains the given value. Time complexity: O(log(n)). Declaration public bool Contains(T value) Parameters Type Name Description T value The value to check. Returns Type Description Boolean True if this hashset contains the given value. ElementAt(Int32) Time complexity: O(log(n)) Declaration public T ElementAt(int index) Parameters Type Name Description Int32 index Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetEnumeratorDesc() Declaration public IEnumerator<T> GetEnumeratorDesc() Returns Type Description IEnumerator <T> IndexOf(T) Time complexity: O(log(n)) Declaration public int IndexOf(T key) Parameters Type Name Description T key Returns Type Description Int32 Max() Time complexity: O(log(n)). Declaration public T Max() Returns Type Description T Min() Time complexity: O(log(n)). Declaration public T Min() Returns Type Description T NextHigher(T) Return the next higher value after given value in this hashset. Time complexity: O(log(n)). Declaration public T NextHigher(T value) Parameters Type Name Description T value Returns Type Description T Null if the given value does'nt exist or next value does'nt exist. NextLower(T) Return the next lower value before given value in this HashSet. Time complexity: O(log(n)). Declaration public T NextLower(T value) Parameters Type Name Description T value Returns Type Description T Null if the given value does'nt exist or previous value does'nt exist. Remove(T) Remove the given key if present. Time complexity: O(log(n)). Returns the position (index) of the removed key if removed. Otherwise returns -1. Declaration public int Remove(T key) Parameters Type Name Description T key Returns Type Description Int32 RemoveAt(Int32) Remove the element at given index. Time complexity: O(log(n)). Declaration public T RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.Queue-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.Queue-1.html",
    "title": "Class Queue<T> | Advanced Algorithms",
    "keywords": "Class Queue<T> A queue implementation. Inheritance Object Queue<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public class Queue<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors Queue(QueueType) Declaration public Queue(QueueType type = QueueType.Array) Parameters Type Name Description QueueType type The queue implementation type. Properties Count The number of items in the queue. Declaration public int Count { get; } Property Value Type Description Int32 Methods Dequeue() Time complexity:O(1). Declaration public T Dequeue() Returns Type Description T Enqueue(T) Time complexity:O(1). Declaration public void Enqueue(T item) Parameters Type Name Description T item GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.QueueType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.QueueType.html",
    "title": "Enum QueueType | Advanced Algorithms",
    "keywords": "Enum QueueType The queue implementation types. Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public enum QueueType Fields Name Description Array LinkedList"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.Stack-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.Stack-1.html",
    "title": "Class Stack<T> | Advanced Algorithms",
    "keywords": "Class Stack<T> A stack implementation. Inheritance Object Stack<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public class Stack<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors Stack(StackType) Declaration public Stack(StackType type = StackType.Array) Parameters Type Name Description StackType type The stack type to use. Properties Count The total number of items in this stack. Declaration public int Count { get; } Property Value Type Description Int32 Methods GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Peek() Peek from stack. Time complexity:O(1). Declaration public T Peek() Returns Type Description T The item peeked. Pop() Time complexity:O(1). Declaration public T Pop() Returns Type Description T The item popped. Push(T) Time complexity:O(1). Declaration public void Push(T item) Parameters Type Name Description T item The item to push. Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Foundation.StackType.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Foundation.StackType.html",
    "title": "Enum StackType | Advanced Algorithms",
    "keywords": "Enum StackType The stack implementation types. Namespace : Advanced.Algorithms.DataStructures.Foundation Assembly : Advanced.Algorithms.dll Syntax public enum StackType Fields Name Description Array LinkedList"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.DiGraph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.DiGraph-1.html",
    "title": "Class DiGraph<T> | Advanced Algorithms",
    "keywords": "Class DiGraph<T> A directed graph implementation. IEnumerable enumerates all vertices. Inheritance Object DiGraph<T> Implements IGraph <T> IDiGraph <T> IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class DiGraph<T> : IGraph<T>, IDiGraph<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors DiGraph() Declaration public DiGraph() Properties IsWeightedGraph Declaration public bool IsWeightedGraph { get; } Property Value Type Description Boolean VerticesAsEnumberable Declaration public IEnumerable<IGraphVertex<T>> VerticesAsEnumberable { get; } Property Value Type Description IEnumerable < IGraphVertex <T>> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T) Add an edge from source to destination vertex. Time complexity: O(1). Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest AddVertex(T) Add a new vertex to this graph. Time complexity: O(1). Declaration public void AddVertex(T value) Parameters Type Name Description T value Clone() Clones this graph. Declaration public DiGraph<T> Clone() Returns Type Description DiGraph <T> ContainsVertex(T) Declaration public bool ContainsVertex(T value) Parameters Type Name Description T value Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator GetVertex(T) Declaration public IDiGraphVertex<T> GetVertex(T value) Parameters Type Name Description T value Returns Type Description IDiGraphVertex <T> HasEdge(T, T) Do we have an edge between the given source and destination? Time complexity: O(1). Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean InEdges(T) Declaration public IEnumerable<T> InEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable <T> OutEdges(T) Declaration public IEnumerable<T> OutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable <T> RemoveEdge(T, T) Remove an existing edge between source and destination. Time complexity: O(1). Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) Remove an existing vertex frm graph. Time complexity: O(V) where V is the total number of vertices in this graph. Declaration public void RemoveVertex(T value) Parameters Type Name Description T value Explicit Interface Implementations IDiGraph<T>.Clone() Declaration IDiGraph<T> IDiGraph<T>.Clone() Returns Type Description IDiGraph <T> IDiGraph<T>.ReferenceVertex Declaration IDiGraphVertex<T> IDiGraph<T>.ReferenceVertex { get; } Returns Type Description IDiGraphVertex <T> IDiGraph<T>.VerticesAsEnumberable Declaration IEnumerable<IDiGraphVertex<T>> IDiGraph<T>.VerticesAsEnumberable { get; } Returns Type Description IEnumerable < IDiGraphVertex <T>> IGraph<T>.Clone() Declaration IGraph<T> IGraph<T>.Clone() Returns Type Description IGraph <T> IGraph<T>.GetVertex(T) Declaration IGraphVertex<T> IGraph<T>.GetVertex(T key) Parameters Type Name Description T key Returns Type Description IGraphVertex <T> IGraph<T>.ReferenceVertex Declaration IGraphVertex<T> IGraph<T>.ReferenceVertex { get; } Returns Type Description IGraphVertex <T> IEnumerable<T>.GetEnumerator() Declaration IEnumerator<T> IEnumerable<T>.GetEnumerator() Returns Type Description IEnumerator <T> Implements IGraph<T> IDiGraph<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.Graph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.Graph-1.html",
    "title": "Class Graph<T> | Advanced Algorithms",
    "keywords": "Class Graph<T> A graph implementation IEnumerable enumerates all vertices. Inheritance Object Graph<T> Implements IGraph <T> IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class Graph<T> : IGraph<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors Graph() Declaration public Graph() Properties IsWeightedGraph Declaration public bool IsWeightedGraph { get; } Property Value Type Description Boolean VerticesAsEnumberable Declaration public IEnumerable<IGraphVertex<T>> VerticesAsEnumberable { get; } Property Value Type Description IEnumerable < IGraphVertex <T>> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T) Add an edge to this graph. Time complexity: O(1). Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest AddVertex(T) Add a new vertex to this graph. Time complexity: O(1). Declaration public void AddVertex(T value) Parameters Type Name Description T value Clone() Clones this graph. Declaration public Graph<T> Clone() Returns Type Description Graph <T> ContainsVertex(T) Declaration public bool ContainsVertex(T value) Parameters Type Name Description T value Returns Type Description Boolean Edges(T) Declaration public IEnumerable<T> Edges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable <T> GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator GetVertex(T) Declaration public IGraphVertex<T> GetVertex(T value) Parameters Type Name Description T value Returns Type Description IGraphVertex <T> HasEdge(T, T) Do we have an edge between given source and destination? Time complexity: O(1). Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) Remove an edge from this graph. Time complexity: O(1). Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) Remove an existing vertex from this graph. Time complexity: O(V) where V is the number of vertices. Declaration public void RemoveVertex(T vertex) Parameters Type Name Description T vertex Explicit Interface Implementations IGraph<T>.Clone() Declaration IGraph<T> IGraph<T>.Clone() Returns Type Description IGraph <T> IGraph<T>.ReferenceVertex Declaration IGraphVertex<T> IGraph<T>.ReferenceVertex { get; } Returns Type Description IGraphVertex <T> IEnumerable<T>.GetEnumerator() Declaration IEnumerator<T> IEnumerable<T>.GetEnumerator() Returns Type Description IEnumerator <T> Implements IGraph<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyList | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyList Classes DiGraph<T> A directed graph implementation. IEnumerable enumerates all vertices. Graph<T> A graph implementation IEnumerable enumerates all vertices. WeightedDiGraph<T, TW> A weighted graph implementation. IEnumerable enumerates all vertices. WeightedGraph<T, TW> A weighted graph implementation. IEnumerable enumerates all vertices."
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedDiGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedDiGraph-2.html",
    "title": "Class WeightedDiGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedDiGraph<T, TW> A weighted graph implementation. IEnumerable enumerates all vertices. Inheritance Object WeightedDiGraph<T, TW> Implements IDiGraph <T> IGraph <T> IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class WeightedDiGraph<T, TW> : IDiGraph<T>, IGraph<T>, IEnumerable<T>, IEnumerable where TW : IComparable Type Parameters Name Description T TW Constructors WeightedDiGraph() Declaration public WeightedDiGraph() Properties IsWeightedGraph Declaration public bool IsWeightedGraph { get; } Property Value Type Description Boolean VerticesAsEnumberable Declaration public IEnumerable<IGraphVertex<T>> VerticesAsEnumberable { get; } Property Value Type Description IEnumerable < IGraphVertex <T>> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T, TW) Add a new edge to this graph. Time complexity: O(1). Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight AddVertex(T) Add a new vertex to this graph. Time complexity: O(1). Declaration public void AddVertex(T value) Parameters Type Name Description T value Clone() Clone this graph. Declaration public WeightedDiGraph<T, TW> Clone() Returns Type Description WeightedDiGraph <T, TW> ContainsVertex(T) Declaration public bool ContainsVertex(T value) Parameters Type Name Description T value Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator GetVertex(T) Declaration public IDiGraphVertex<T> GetVertex(T key) Parameters Type Name Description T key Returns Type Description IDiGraphVertex <T> HasEdge(T, T) Do we have an edge between given source and destination? Time complexity: O(1). Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean InEdges(T) Declaration public IEnumerable<Tuple<T, TW>> InEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable < Tuple <T, TW>> OutEdges(T) Declaration public IEnumerable<Tuple<T, TW>> OutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable < Tuple <T, TW>> RemoveEdge(T, T) Remove the given edge from this graph. Time complexity: O(1). Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) Remove the given vertex. Time complexity: O(V) where V is the number of vertices. Declaration public void RemoveVertex(T value) Parameters Type Name Description T value Explicit Interface Implementations IDiGraph<T>.Clone() Declaration IDiGraph<T> IDiGraph<T>.Clone() Returns Type Description IDiGraph <T> IDiGraph<T>.ReferenceVertex Declaration IDiGraphVertex<T> IDiGraph<T>.ReferenceVertex { get; } Returns Type Description IDiGraphVertex <T> IDiGraph<T>.VerticesAsEnumberable Declaration IEnumerable<IDiGraphVertex<T>> IDiGraph<T>.VerticesAsEnumberable { get; } Returns Type Description IEnumerable < IDiGraphVertex <T>> IGraph<T>.Clone() Declaration IGraph<T> IGraph<T>.Clone() Returns Type Description IGraph <T> IGraph<T>.GetVertex(T) Declaration IGraphVertex<T> IGraph<T>.GetVertex(T key) Parameters Type Name Description T key Returns Type Description IGraphVertex <T> IGraph<T>.ReferenceVertex Declaration IGraphVertex<T> IGraph<T>.ReferenceVertex { get; } Returns Type Description IGraphVertex <T> IEnumerable<T>.GetEnumerator() Declaration IEnumerator<T> IEnumerable<T>.GetEnumerator() Returns Type Description IEnumerator <T> Implements IDiGraph<T> IGraph<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyList.WeightedGraph-2.html",
    "title": "Class WeightedGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedGraph<T, TW> A weighted graph implementation. IEnumerable enumerates all vertices. Inheritance Object WeightedGraph<T, TW> Implements IGraph <T> IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyList Assembly : Advanced.Algorithms.dll Syntax public class WeightedGraph<T, TW> : IGraph<T>, IEnumerable<T>, IEnumerable where TW : IComparable Type Parameters Name Description T TW Constructors WeightedGraph() Declaration public WeightedGraph() Properties IsWeightedGraph Declaration public bool IsWeightedGraph { get; } Property Value Type Description Boolean VerticesAsEnumberable Declaration public IEnumerable<IGraphVertex<T>> VerticesAsEnumberable { get; } Property Value Type Description IEnumerable < IGraphVertex <T>> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T, TW) Add a new edge to this graph with given weight and between given source and destination vertex. Time complexity: O(1). Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight AddVertex(T) Add a new vertex to this graph. Time complexity: O(1). Declaration public void AddVertex(T value) Parameters Type Name Description T value Clone() Clones this graph. Declaration public WeightedGraph<T, TW> Clone() Returns Type Description WeightedGraph <T, TW> ContainsVertex(T) Declaration public bool ContainsVertex(T value) Parameters Type Name Description T value Returns Type Description Boolean GetAllEdges(T) Declaration public List<Tuple<T, TW>> GetAllEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description List < Tuple <T, TW>> GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator GetVertex(T) Declaration public IGraphVertex<T> GetVertex(T value) Parameters Type Name Description T value Returns Type Description IGraphVertex <T> HasEdge(T, T) Do we have an edge between given source and destination? Time complexity: O(1). Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) Remove given edge. Time complexity: O(1). Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) Remove given vertex from this graph. Time complexity: O(V) where V is the number of vertices. Declaration public void RemoveVertex(T value) Parameters Type Name Description T value Explicit Interface Implementations IGraph<T>.Clone() Declaration IGraph<T> IGraph<T>.Clone() Returns Type Description IGraph <T> IGraph<T>.ReferenceVertex Declaration IGraphVertex<T> IGraph<T>.ReferenceVertex { get; } Returns Type Description IGraphVertex <T> IEnumerable<T>.GetEnumerator() Declaration IEnumerator<T> IEnumerable<T>.GetEnumerator() Returns Type Description IEnumerator <T> Implements IGraph<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.DiGraph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.DiGraph-1.html",
    "title": "Class DiGraph<T> | Advanced Algorithms",
    "keywords": "Class DiGraph<T> A directed graph implementation using dynamically growing/shrinking adjacency matrix array. IEnumerable enumerates all vertices. Inheritance Object DiGraph<T> Implements IGraph <T> IDiGraph <T> IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class DiGraph<T> : IGraph<T>, IDiGraph<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors DiGraph() Declaration public DiGraph() Properties IsWeightedGraph Declaration public bool IsWeightedGraph { get; } Property Value Type Description Boolean ReferenceVertex Declaration public IGraphVertex<T> ReferenceVertex { get; } Property Value Type Description IGraphVertex <T> VerticesAsEnumberable Declaration public IEnumerable<IDiGraphVertex<T>> VerticesAsEnumberable { get; } Property Value Type Description IEnumerable < IDiGraphVertex <T>> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T) add an edge from source to destination vertex Time complexity: O(1). Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest AddVertex(T) Add a new vertex to this graph. Time complexity: O(1). Declaration public void AddVertex(T value) Parameters Type Name Description T value Clone() Declaration public DiGraph<T> Clone() Returns Type Description DiGraph <T> ContainsVertex(T) Declaration public bool ContainsVertex(T key) Parameters Type Name Description T key Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetVertex(T) Declaration public IGraphVertex<T> GetVertex(T key) Parameters Type Name Description T key Returns Type Description IGraphVertex <T> HasEdge(T, T) do we have an edge between the given source and destination? Time complexity: O(1). Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean InEdgeCount(T) Declaration public int InEdgeCount(T vertex) Parameters Type Name Description T vertex Returns Type Description Int32 InEdges(T) Declaration public IEnumerable<T> InEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable <T> OutEdgeCount(T) Declaration public int OutEdgeCount(T vertex) Parameters Type Name Description T vertex Returns Type Description Int32 OutEdges(T) Declaration public IEnumerable<T> OutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable <T> RemoveEdge(T, T) remove an existing edge between source and destination Time complexity: O(1). Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) Remove an existing vertex from graph Time complexity: O(V) where V is the number of vertices. Declaration public void RemoveVertex(T value) Parameters Type Name Description T value Explicit Interface Implementations IDiGraph<T>.Clone() Declaration IDiGraph<T> IDiGraph<T>.Clone() Returns Type Description IDiGraph <T> IDiGraph<T>.GetVertex(T) Declaration IDiGraphVertex<T> IDiGraph<T>.GetVertex(T key) Parameters Type Name Description T key Returns Type Description IDiGraphVertex <T> IDiGraph<T>.ReferenceVertex Declaration IDiGraphVertex<T> IDiGraph<T>.ReferenceVertex { get; } Returns Type Description IDiGraphVertex <T> IGraph<T>.Clone() Declaration IGraph<T> IGraph<T>.Clone() Returns Type Description IGraph <T> IGraph<T>.VerticesAsEnumberable Declaration IEnumerable<IGraphVertex<T>> IGraph<T>.VerticesAsEnumberable { get; } Returns Type Description IEnumerable < IGraphVertex <T>> IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IGraph<T> IDiGraph<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.Graph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.Graph-1.html",
    "title": "Class Graph<T> | Advanced Algorithms",
    "keywords": "Class Graph<T> A directed graph implementation using dynamically growing/shrinking adjacency matrix array. IEnumerable enumerates all vertices. Inheritance Object Graph<T> Implements IGraph <T> IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class Graph<T> : IGraph<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors Graph() Declaration public Graph() Properties IsWeightedGraph Declaration public bool IsWeightedGraph { get; } Property Value Type Description Boolean ReferenceVertex Declaration public IGraphVertex<T> ReferenceVertex { get; } Property Value Type Description IGraphVertex <T> VerticesAsEnumberable Declaration public IEnumerable<IGraphVertex<T>> VerticesAsEnumberable { get; } Property Value Type Description IEnumerable < IGraphVertex <T>> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T) Add an edge from source to destination vertex. Time complexity: O(1). Declaration public void AddEdge(T source, T dest) Parameters Type Name Description T source T dest AddVertex(T) Add a new vertex to this graph. Time complexity: O(1). Declaration public void AddVertex(T value) Parameters Type Name Description T value Clone() Declaration public Graph<T> Clone() Returns Type Description Graph <T> ContainsVertex(T) Declaration public bool ContainsVertex(T key) Parameters Type Name Description T key Returns Type Description Boolean Edges(T) Declaration public IEnumerable<T> Edges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable <T> EdgesCount(T) Declaration public int EdgesCount(T vertex) Parameters Type Name Description T vertex Returns Type Description Int32 GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetVertex(T) Declaration public IGraphVertex<T> GetVertex(T key) Parameters Type Name Description T key Returns Type Description IGraphVertex <T> HasEdge(T, T) Do we have an edge between the given source and destination? Time complexity: O(1). Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) Remove an existing edge between source and destination. Time complexity: O(1). Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) Remove an existing vertex from graph. Time complexity: O(V) where V is the number of vertices. Declaration public void RemoveVertex(T value) Parameters Type Name Description T value Explicit Interface Implementations IGraph<T>.Clone() Declaration IGraph<T> IGraph<T>.Clone() Returns Type Description IGraph <T> IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IGraph<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Classes DiGraph<T> A directed graph implementation using dynamically growing/shrinking adjacency matrix array. IEnumerable enumerates all vertices. Graph<T> A directed graph implementation using dynamically growing/shrinking adjacency matrix array. IEnumerable enumerates all vertices. WeightedDiGraph<T, TW> A weighted graph implementation using dynamically growing/shrinking adjacency matrix array. IEnumerable enumerates all vertices. WeightedGraph<T, TW> A weighted graph implementation using dynamically growing/shrinking adjacency matrix array. IEnumerable enumerates all vertices."
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedDiGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedDiGraph-2.html",
    "title": "Class WeightedDiGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedDiGraph<T, TW> A weighted graph implementation using dynamically growing/shrinking adjacency matrix array. IEnumerable enumerates all vertices. Inheritance Object WeightedDiGraph<T, TW> Implements IDiGraph <T> IGraph <T> IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class WeightedDiGraph<T, TW> : IDiGraph<T>, IGraph<T>, IEnumerable<T>, IEnumerable where TW : IComparable Type Parameters Name Description T TW Constructors WeightedDiGraph() Declaration public WeightedDiGraph() Properties IsWeightedGraph Declaration public bool IsWeightedGraph { get; } Property Value Type Description Boolean ReferenceVertex Declaration public IDiGraphVertex<T> ReferenceVertex { get; } Property Value Type Description IDiGraphVertex <T> VerticesAsEnumberable Declaration public IEnumerable<IDiGraphVertex<T>> VerticesAsEnumberable { get; } Property Value Type Description IEnumerable < IDiGraphVertex <T>> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T, TW) Add a new edge to this graph. Time complexity: O(1). Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight AddVertex(T) Add a new vertex to this graph. Time complexity: O(1). Declaration public void AddVertex(T value) Parameters Type Name Description T value Clone() Declaration public WeightedDiGraph<T, TW> Clone() Returns Type Description WeightedDiGraph <T, TW> ContainsVertex(T) Declaration public bool ContainsVertex(T value) Parameters Type Name Description T value Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetVertex(T) Declaration public IDiGraphVertex<T> GetVertex(T key) Parameters Type Name Description T key Returns Type Description IDiGraphVertex <T> HasEdge(T, T) Do we have an edge between given source and destination? Time complexity: O(1). Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean InEdgeCount(T) Declaration public int InEdgeCount(T vertex) Parameters Type Name Description T vertex Returns Type Description Int32 InEdges(T) Declaration public IEnumerable<KeyValuePair<T, TW>> InEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable < KeyValuePair <T, TW>> OutEdgeCount(T) Declaration public int OutEdgeCount(T vertex) Parameters Type Name Description T vertex Returns Type Description Int32 OutEdges(T) Declaration public IEnumerable<KeyValuePair<T, TW>> OutEdges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable < KeyValuePair <T, TW>> RemoveEdge(T, T) Remove the given edge from this graph. Time complexity: O(1). Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) Remove the given vertex. Time complexity: O(V) where V is the number of vertices. Declaration public void RemoveVertex(T value) Parameters Type Name Description T value Explicit Interface Implementations IDiGraph<T>.Clone() Declaration IDiGraph<T> IDiGraph<T>.Clone() Returns Type Description IDiGraph <T> IGraph<T>.Clone() Declaration IGraph<T> IGraph<T>.Clone() Returns Type Description IGraph <T> IGraph<T>.GetVertex(T) Declaration IGraphVertex<T> IGraph<T>.GetVertex(T key) Parameters Type Name Description T key Returns Type Description IGraphVertex <T> IGraph<T>.ReferenceVertex Declaration IGraphVertex<T> IGraph<T>.ReferenceVertex { get; } Returns Type Description IGraphVertex <T> IGraph<T>.VerticesAsEnumberable Declaration IEnumerable<IGraphVertex<T>> IGraph<T>.VerticesAsEnumberable { get; } Returns Type Description IEnumerable < IGraphVertex <T>> IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IDiGraph<T> IGraph<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedGraph-2.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix.WeightedGraph-2.html",
    "title": "Class WeightedGraph<T, TW> | Advanced Algorithms",
    "keywords": "Class WeightedGraph<T, TW> A weighted graph implementation using dynamically growing/shrinking adjacency matrix array. IEnumerable enumerates all vertices. Inheritance Object WeightedGraph<T, TW> Implements IGraph <T> IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures.Graph.AdjacencyMatrix Assembly : Advanced.Algorithms.dll Syntax public class WeightedGraph<T, TW> : IGraph<T>, IEnumerable<T>, IEnumerable where TW : IComparable Type Parameters Name Description T TW Constructors WeightedGraph() Declaration public WeightedGraph() Properties IsWeightedGraph Declaration public bool IsWeightedGraph { get; } Property Value Type Description Boolean ReferenceVertex Declaration public IGraphVertex<T> ReferenceVertex { get; } Property Value Type Description IGraphVertex <T> VerticesAsEnumberable Declaration public IEnumerable<IGraphVertex<T>> VerticesAsEnumberable { get; } Property Value Type Description IEnumerable < IGraphVertex <T>> VerticesCount Declaration public int VerticesCount { get; } Property Value Type Description Int32 Methods AddEdge(T, T, TW) Add a new edge to this graph with given weight and between given source and destination vertex. Time complexity: O(1). Declaration public void AddEdge(T source, T dest, TW weight) Parameters Type Name Description T source T dest TW weight AddVertex(T) Add a new vertex to this graph. Time complexity: O(1). Declaration public void AddVertex(T value) Parameters Type Name Description T value Clone() Clones this graph. Declaration public WeightedGraph<T, TW> Clone() Returns Type Description WeightedGraph <T, TW> ContainsVertex(T) Declaration public bool ContainsVertex(T key) Parameters Type Name Description T key Returns Type Description Boolean EdgeCount(T) Declaration public int EdgeCount(T vertex) Parameters Type Name Description T vertex Returns Type Description Int32 Edges(T) Declaration public IEnumerable<KeyValuePair<T, TW>> Edges(T vertex) Parameters Type Name Description T vertex Returns Type Description IEnumerable < KeyValuePair <T, TW>> GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetVertex(T) Declaration public IGraphVertex<T> GetVertex(T key) Parameters Type Name Description T key Returns Type Description IGraphVertex <T> HasEdge(T, T) Do we have an edge between given source and destination? Time complexity: O(1). Declaration public bool HasEdge(T source, T dest) Parameters Type Name Description T source T dest Returns Type Description Boolean RemoveEdge(T, T) Remove given edge. Time complexity: O(1). Declaration public void RemoveEdge(T source, T dest) Parameters Type Name Description T source T dest RemoveVertex(T) Remove given vertex from this graph. Time complexity: O(V) where V is the number of vertices. Declaration public void RemoveVertex(T value) Parameters Type Name Description T value Explicit Interface Implementations IGraph<T>.Clone() Declaration IGraph<T> IGraph<T>.Clone() Returns Type Description IGraph <T> IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IGraph<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.html",
    "title": "Namespace Advanced.Algorithms.DataStructures.Graph | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures.Graph Interfaces IDiEdge<T> IDiGraph<T> Directed graph. IDiGraphVertex<T> IEdge<T> IGraph<T> UnDirected graph. (When implemented on a directed graphs only outgoing edges are considered as Edges). IGraphVertex<T>"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.IDiEdge-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.IDiEdge-1.html",
    "title": "Interface IDiEdge<T> | Advanced Algorithms",
    "keywords": "Interface IDiEdge<T> Namespace : Advanced.Algorithms.DataStructures.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IDiEdge<T> Type Parameters Name Description T Properties TargetVertex Declaration IDiGraphVertex<T> TargetVertex { get; } Property Value Type Description IDiGraphVertex <T> TargetVertexKey Declaration T TargetVertexKey { get; } Property Value Type Description T Methods Weight<W>() Declaration W Weight<W>() where W : IComparable Returns Type Description W Type Parameters Name Description W"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.IDiGraph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.IDiGraph-1.html",
    "title": "Interface IDiGraph<T> | Advanced Algorithms",
    "keywords": "Interface IDiGraph<T> Directed graph. Namespace : Advanced.Algorithms.DataStructures.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IDiGraph<T> Type Parameters Name Description T Properties IsWeightedGraph Declaration bool IsWeightedGraph { get; } Property Value Type Description Boolean ReferenceVertex Declaration IDiGraphVertex<T> ReferenceVertex { get; } Property Value Type Description IDiGraphVertex <T> VerticesAsEnumberable Declaration IEnumerable<IDiGraphVertex<T>> VerticesAsEnumberable { get; } Property Value Type Description IEnumerable < IDiGraphVertex <T>> VerticesCount Declaration int VerticesCount { get; } Property Value Type Description Int32 Methods Clone() Declaration IDiGraph<T> Clone() Returns Type Description IDiGraph <T> ContainsVertex(T) Declaration bool ContainsVertex(T value) Parameters Type Name Description T value Returns Type Description Boolean GetVertex(T) Declaration IDiGraphVertex<T> GetVertex(T key) Parameters Type Name Description T key Returns Type Description IDiGraphVertex <T> HasEdge(T, T) Declaration bool HasEdge(T source, T destination) Parameters Type Name Description T source T destination Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.IDiGraphVertex-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.IDiGraphVertex-1.html",
    "title": "Interface IDiGraphVertex<T> | Advanced Algorithms",
    "keywords": "Interface IDiGraphVertex<T> Namespace : Advanced.Algorithms.DataStructures.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IDiGraphVertex<T> Type Parameters Name Description T Properties InEdgeCount Declaration int InEdgeCount { get; } Property Value Type Description Int32 InEdges Declaration IEnumerable<IDiEdge<T>> InEdges { get; } Property Value Type Description IEnumerable < IDiEdge <T>> Key Declaration T Key { get; } Property Value Type Description T OutEdgeCount Declaration int OutEdgeCount { get; } Property Value Type Description Int32 OutEdges Declaration IEnumerable<IDiEdge<T>> OutEdges { get; } Property Value Type Description IEnumerable < IDiEdge <T>> Methods GetOutEdge(IDiGraphVertex<T>) Declaration IDiEdge<T> GetOutEdge(IDiGraphVertex<T> targetVertex) Parameters Type Name Description IDiGraphVertex <T> targetVertex Returns Type Description IDiEdge <T>"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.IEdge-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.IEdge-1.html",
    "title": "Interface IEdge<T> | Advanced Algorithms",
    "keywords": "Interface IEdge<T> Namespace : Advanced.Algorithms.DataStructures.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IEdge<T> Type Parameters Name Description T Properties TargetVertex Declaration IGraphVertex<T> TargetVertex { get; } Property Value Type Description IGraphVertex <T> TargetVertexKey Declaration T TargetVertexKey { get; } Property Value Type Description T Methods Weight<W>() Declaration W Weight<W>() where W : IComparable Returns Type Description W Type Parameters Name Description W"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.IGraph-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.IGraph-1.html",
    "title": "Interface IGraph<T> | Advanced Algorithms",
    "keywords": "Interface IGraph<T> UnDirected graph. (When implemented on a directed graphs only outgoing edges are considered as Edges). Namespace : Advanced.Algorithms.DataStructures.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IGraph<T> Type Parameters Name Description T Properties IsWeightedGraph Declaration bool IsWeightedGraph { get; } Property Value Type Description Boolean ReferenceVertex Declaration IGraphVertex<T> ReferenceVertex { get; } Property Value Type Description IGraphVertex <T> VerticesAsEnumberable Declaration IEnumerable<IGraphVertex<T>> VerticesAsEnumberable { get; } Property Value Type Description IEnumerable < IGraphVertex <T>> VerticesCount Declaration int VerticesCount { get; } Property Value Type Description Int32 Methods Clone() Declaration IGraph<T> Clone() Returns Type Description IGraph <T> ContainsVertex(T) Declaration bool ContainsVertex(T key) Parameters Type Name Description T key Returns Type Description Boolean GetVertex(T) Declaration IGraphVertex<T> GetVertex(T key) Parameters Type Name Description T key Returns Type Description IGraphVertex <T> HasEdge(T, T) Declaration bool HasEdge(T source, T destination) Parameters Type Name Description T source T destination Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.DataStructures.Graph.IGraphVertex-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Graph.IGraphVertex-1.html",
    "title": "Interface IGraphVertex<T> | Advanced Algorithms",
    "keywords": "Interface IGraphVertex<T> Namespace : Advanced.Algorithms.DataStructures.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IGraphVertex<T> Type Parameters Name Description T Properties Edges Declaration IEnumerable<IEdge<T>> Edges { get; } Property Value Type Description IEnumerable < IEdge <T>> Key Declaration T Key { get; } Property Value Type Description T Methods GetEdge(IGraphVertex<T>) Declaration IEdge<T> GetEdge(IGraphVertex<T> targetVertex) Parameters Type Name Description IGraphVertex <T> targetVertex Returns Type Description IEdge <T>"
  },
  "api/Advanced.Algorithms.DataStructures.html": {
    "href": "api/Advanced.Algorithms.DataStructures.html",
    "title": "Namespace Advanced.Algorithms.DataStructures | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.DataStructures Classes AVLTree<T> An AVL tree implementation. BHeap<T> A binary heap implementation. BinaryTree<T> A binary tree implementation using pointers. BinomialHeap<T> A binomial minMax heap implementation. BloomFilter<T> A simple bloom filter implementation. BpTree<T> A B+ tree implementation. BST<T> A binary search tree implementation. BTree<T> A B-tree implementation. CircularLinkedList<T> A circular linked list implementation. CircularLinkedListNode<T> Circular linked list node. DaryHeap<T> A D-ary minMax heap implementation. DisJointSet<T> A disjoint set implementation. DoublyLinkedList<T> A doubly linked list implementation. DoublyLinkedListNode<T> Doubly linked list node. FenwickTree<T> A Fenwick Tree (binary indexed tree) implementation for prefix sum. FibonacciHeap<T> A fibornacci minMax heap implementation. IntervalTree<T> A multi-dimensional interval tree implementation. KDTree<T> A multiDimensional k-d tree implementation (Unbalanced). PairingHeap<T> A pairing minMax heap implementation. PriorityQueue<T> A priority queue implementation using heap QuadTree<T> A quadtree implementation. RangeTree<T> A multi-dimentional range tree implementation. RedBlackTree<T> A red black tree implementation. RTree An RTree implementation. SegmentTree<T> A segment tree implementation. SinglyLinkedList<T> A singly linked list implementation. SinglyLinkedListNode<T> Singly linked list node. SkipList<T> A skip list implementation with IEnumerable support. SparseSet A sparse set implementation. SplayTree<T> A splay tree implementation. SuffixTree<T> A suffix tree implementation using a trie. TernarySearchTree<T> A ternary search tree implementation. TreapTree<T> A treap tree implementation. Tree<T> A tree implementation. Trie<T> A trie (prefix tree) implementation. Interfaces IDistanceCalculator<T> A concrete implementation of this interface is required when calling NearestNeigbour() for k-d tree."
  },
  "api/Advanced.Algorithms.DataStructures.IDistanceCalculator-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.IDistanceCalculator-1.html",
    "title": "Interface IDistanceCalculator<T> | Advanced Algorithms",
    "keywords": "Interface IDistanceCalculator<T> A concrete implementation of this interface is required when calling NearestNeigbour() for k-d tree. Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public interface IDistanceCalculator<T> where T : IComparable Type Parameters Name Description T Methods Compare(T, T, T[], T[]) Compare distance between point A to B and the distance between point Start to End. Declaration int Compare(T a, T b, T[] start, T[] end) Parameters Type Name Description T a T b T[] start T[] end Returns Type Description Int32 similar result as IComparabl.e Compare(T[], T[], T[]) Compare the distance between point A to point and point B to point. Declaration int Compare(T[] a, T[] b, T[] point) Parameters Type Name Description T[] a T[] b T[] point Returns Type Description Int32 similar result as IComparable."
  },
  "api/Advanced.Algorithms.DataStructures.IntervalTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.IntervalTree-1.html",
    "title": "Class IntervalTree<T> | Advanced Algorithms",
    "keywords": "Class IntervalTree<T> A multi-dimensional interval tree implementation. Inheritance Object IntervalTree<T> Implements IEnumerable < Tuple <T[], T[]>> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class IntervalTree<T> : IEnumerable<Tuple<T[], T[]>>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors IntervalTree(Int32) Declaration public IntervalTree(int dimension) Parameters Type Name Description Int32 dimension Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T[], T[]) Delete this interval from this interval tree. Time complexity : O(d(log(n) + m)) where d is dimensions and m is the number of intervals that overlap with this deleted interval. Declaration public void Delete(T[] start, T[] end) Parameters Type Name Description T[] start T[] end DoOverlap(T[], T[]) Does this interval overlap with any interval in this interval tree? Declaration public bool DoOverlap(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<Tuple<T[], T[]>> GetEnumerator() Returns Type Description IEnumerator < Tuple <T[], T[]>> GetOverlaps(T[], T[]) returns a list of matching intervals. Time complexity : O(d(log(n) + m)) where d is dimensions and m is the number of overlaps. Declaration public List<Tuple<T[], T[]>> GetOverlaps(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description List < Tuple <T[], T[]>> Insert(T[], T[]) Add a new interval to this interval tree. Time complexity : O(d(log(n) + m)) where d is dimensions and m is the number of intervals that overlaps with this inserted interval. Declaration public void Insert(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.KDTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.KDTree-1.html",
    "title": "Class KDTree<T> | Advanced Algorithms",
    "keywords": "Class KDTree<T> A multiDimensional k-d tree implementation (Unbalanced). Inheritance Object KDTree<T> Implements IEnumerable <T[]> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class KDTree<T> : IEnumerable<T[]>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors KDTree(Int32) Declaration public KDTree(int dimensions) Parameters Type Name Description Int32 dimensions Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T[]) Delete point. Time complexity: O(log(n)) Declaration public void Delete(T[] point) Parameters Type Name Description T[] point GetEnumerator() Declaration public IEnumerator<T[]> GetEnumerator() Returns Type Description IEnumerator <T[]> Insert(T[]) Inserts a new item to this Kd tree. Time complexity: O(log(n)) Declaration public void Insert(T[] point) Parameters Type Name Description T[] point NearestNeighbour(IDistanceCalculator<T>, T[]) Returns the nearest neigbour to point. Time complexity: O(log(n)) Declaration public T[] NearestNeighbour(IDistanceCalculator<T> distanceCalculator, T[] point) Parameters Type Name Description IDistanceCalculator <T> distanceCalculator T[] point Returns Type Description T[] RangeSearch(T[], T[]) Returns a list of nodes that are withing the given area start and end ranges Declaration public List<T[]> RangeSearch(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description List <T[]> Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.PairingHeap-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.PairingHeap-1.html",
    "title": "Class PairingHeap<T> | Advanced Algorithms",
    "keywords": "Class PairingHeap<T> A pairing minMax heap implementation. Inheritance Object PairingHeap<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class PairingHeap<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors PairingHeap(SortDirection) Declaration public PairingHeap(SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description SortDirection sortDirection Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Extract() Time complexity: O(log(n)). Declaration public T Extract() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Insert(T) Insert a new Node. Time complexity: O(1). Declaration public void Insert(T newItem) Parameters Type Name Description T newItem Merge(PairingHeap<T>) Merge another heap with this heap. Time complexity: O(1). Declaration public void Merge(PairingHeap<T> PairingHeap) Parameters Type Name Description PairingHeap <T> PairingHeap Peek() Time complexity: O(1). Declaration public T Peek() Returns Type Description T UpdateKey(T, T) Time complexity: O(log(n)). Declaration public void UpdateKey(T currentValue, T newValue) Parameters Type Name Description T currentValue T newValue Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.PriorityQueue-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | Advanced Algorithms",
    "keywords": "Class PriorityQueue<T> A priority queue implementation using heap Inheritance Object PriorityQueue<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class PriorityQueue<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors PriorityQueue(SortDirection) Declaration public PriorityQueue(SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description SortDirection sortDirection Methods Dequeue() Time complexity:O(log(n)). Declaration public T Dequeue() Returns Type Description T Enqueue(T) Time complexity:O(log(n)). Declaration public void Enqueue(T item) Parameters Type Name Description T item GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Peek() Time complexity:O(1). Declaration public T Peek() Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.QuadTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.QuadTree-1.html",
    "title": "Class QuadTree<T> | Advanced Algorithms",
    "keywords": "Class QuadTree<T> A quadtree implementation. Inheritance Object QuadTree<T> Implements IEnumerable < Tuple < Point , T>> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class QuadTree<T> : IEnumerable<Tuple<Point, T>>, IEnumerable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(Point) Time complexity: O(n). Declaration public void Delete(Point p) Parameters Type Name Description Point p GetEnumerator() Declaration public IEnumerator<Tuple<Point, T>> GetEnumerator() Returns Type Description IEnumerator < Tuple < Point , T>> Insert(Point, T) Time complexity: O(n). Declaration public void Insert(Point point, T value = null) Parameters Type Name Description Point point The co-ordinate. T value The value associated with this co-ordinate if any. RangeSearch(Rectangle) Time complexity: O(n). Declaration public List<Tuple<Point, T>> RangeSearch(Rectangle searchWindow) Parameters Type Name Description Rectangle searchWindow Returns Type Description List < Tuple < Point , T>> Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.RangeTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.RangeTree-1.html",
    "title": "Class RangeTree<T> | Advanced Algorithms",
    "keywords": "Class RangeTree<T> A multi-dimentional range tree implementation. Inheritance Object RangeTree<T> Implements IEnumerable <T[]> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class RangeTree<T> : IEnumerable<T[]>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors RangeTree(Int32) Declaration public RangeTree(int dimensions) Parameters Type Name Description Int32 dimensions Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T[]) Time complexity: O(n). Declaration public void Delete(T[] value) Parameters Type Name Description T[] value GetEnumerator() Declaration public IEnumerator<T[]> GetEnumerator() Returns Type Description IEnumerator <T[]> Insert(T[]) Time complexity: O(n). Declaration public void Insert(T[] value) Parameters Type Name Description T[] value RangeSearch(T[], T[]) Get all points within given range. Time complexity: O(n). Declaration public List<T[]> RangeSearch(T[] start, T[] end) Parameters Type Name Description T[] start T[] end Returns Type Description List <T[]> Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.RedBlackTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.RedBlackTree-1.html",
    "title": "Class RedBlackTree<T> | Advanced Algorithms",
    "keywords": "Class RedBlackTree<T> A red black tree implementation. Inheritance Object RedBlackTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class RedBlackTree<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors RedBlackTree(Boolean, IEqualityComparer<T>) Declaration public RedBlackTree(bool enableNodeLookUp = false, IEqualityComparer<T> equalityComparer = null) Parameters Type Name Description Boolean enableNodeLookUp Enabling lookup will fasten deletion/insertion/exists operations at the cost of additional space. IEqualityComparer <T> equalityComparer Provide equality comparer for node lookup if enabled (required when T is not a value type). RedBlackTree(IEnumerable<T>, Boolean, IEqualityComparer<T>) Initialize the BST with given sorted keys optionally. Time complexity: O(n). Declaration public RedBlackTree(IEnumerable<T> sortedCollection, bool enableNodeLookUp = false, IEqualityComparer<T> equalityComparer = null) Parameters Type Name Description IEnumerable <T> sortedCollection The sorted initial collection. Boolean enableNodeLookUp Enabling lookup will fasten deletion/insertion/exists operations at the cost of additional space. IEqualityComparer <T> equalityComparer Provide equality comparer for node lookup if enabled (required when T is not a value type). Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods AsEnumerableDesc() Descending enumerable. Declaration public IEnumerable<T> AsEnumerableDesc() Returns Type Description IEnumerable <T> Delete(T) Delete if value exists. Time complexity: O(log(n)) Returns the position (index) of the item if deleted; otherwise returns -1 Declaration public int Delete(T value) Parameters Type Name Description T value Returns Type Description Int32 ElementAt(Int32) Time complexity: O(log(n)) Declaration public T ElementAt(int index) Parameters Type Name Description Int32 index Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetEnumeratorDesc() Declaration public IEnumerator<T> GetEnumeratorDesc() Returns Type Description IEnumerator <T> HasItem(T) Time complexity: O(log(n)) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean IndexOf(T) Time complexity: O(log(n)) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 Insert(T) Time complexity: O(log(n)). Returns the position (index) of the value in sorted order of this BST. Declaration public int Insert(T value) Parameters Type Name Description T value Returns Type Description Int32 Max() Time complexity: O(log(n)) Declaration public T Max() Returns Type Description T Min() Time complexity: O(log(n)) Declaration public T Min() Returns Type Description T NextHigher(T) Get the next higher to given value in this BST. Declaration public T NextHigher(T value) Parameters Type Name Description T value Returns Type Description T NextLower(T) Get the next lower value to given value in this BST. Declaration public T NextLower(T value) Parameters Type Name Description T value Returns Type Description T RemoveAt(Int32) Time complexity: O(log(n)) Declaration public T RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.RTree.html": {
    "href": "api/Advanced.Algorithms.DataStructures.RTree.html",
    "title": "Class RTree | Advanced Algorithms",
    "keywords": "Class RTree An RTree implementation. Inheritance Object RTree Implements IEnumerable < Polygon > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class RTree : IEnumerable<Polygon>, IEnumerable Constructors RTree(Int32) Declaration public RTree(int maxKeysPerNode) Parameters Type Name Description Int32 maxKeysPerNode Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Clear() Clear all data in this R-tree. Declaration public void Clear() Delete(Polygon) Time complexity: O(log(n)). Declaration public void Delete(Polygon polygon) Parameters Type Name Description Polygon polygon Exists(Polygon) Check if the given polygon exists in this Rtree. Time complexity: O(1). Declaration public bool Exists(Polygon searchPolygon) Parameters Type Name Description Polygon searchPolygon Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<Polygon> GetEnumerator() Returns Type Description IEnumerator < Polygon > Insert(Polygon) Inserts given polygon. Time complexity: O(log(n)). Declaration public void Insert(Polygon newPolygon) Parameters Type Name Description Polygon newPolygon RangeSearch(Rectangle) Returns a list of polygons whose minimum bounded rectangle intersects with given search rectangle. Declaration public List<Polygon> RangeSearch(Rectangle searchRectangle) Parameters Type Name Description Rectangle searchRectangle Returns Type Description List < Polygon > Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.SegmentTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SegmentTree-1.html",
    "title": "Class SegmentTree<T> | Advanced Algorithms",
    "keywords": "Class SegmentTree<T> A segment tree implementation. Inheritance Object SegmentTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SegmentTree<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors SegmentTree(T[], Func<T, T, T>, Func<T>) Constructs a segment tree using the specified operation function. Operation function is the criteria for range queries. For example operation function can return Max, Min or Sum of the two input elements. Default value is the void value that will eliminate a node during operation comparisons. For example if operation return min value then the default value will be largest value (int.Max for if T is int). Or default value will be 0 if operation is sum. Time complexity: O(n). Declaration public SegmentTree(T[] input, Func<T, T, T> operation, Func<T> defaultValue) Parameters Type Name Description T[] input Func <T, T, T> operation Func <T> defaultValue Methods GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> RangeResult(Int32, Int32) Gets the operation aggregated result for given range of the input. Time complexity: O(log(n)). Declaration public T RangeResult(int startIndex, int endIndex) Parameters Type Name Description Int32 startIndex Int32 endIndex Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.SinglyLinkedList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SinglyLinkedList-1.html",
    "title": "Class SinglyLinkedList<T> | Advanced Algorithms",
    "keywords": "Class SinglyLinkedList<T> A singly linked list implementation. Inheritance Object SinglyLinkedList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SinglyLinkedList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Fields Head Declaration public SinglyLinkedListNode<T> Head Field Value Type Description SinglyLinkedListNode <T> Methods Clear() Declaration public void Clear() Delete(T) Delete given element. Time complexity: O(n) Declaration public void Delete(T element) Parameters Type Name Description T element DeleteFirst() Time complexity: O(1). Declaration public T DeleteFirst() Returns Type Description T DeleteLast() Time complexity: O(n). Declaration public T DeleteLast() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> InsertFirst(T) Insert first. Time complexity: O(1). Declaration public void InsertFirst(T data) Parameters Type Name Description T data InsertFirst(SinglyLinkedListNode<T>) Inserts this element to the begining. Time complexity: O(1). Declaration public void InsertFirst(SinglyLinkedListNode<T> current) Parameters Type Name Description SinglyLinkedListNode <T> current InsertLast(T) Time complexity: O(n). Declaration public void InsertLast(T data) Parameters Type Name Description T data IsEmpty() Declaration public bool IsEmpty() Returns Type Description Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.SinglyLinkedListNode-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SinglyLinkedListNode-1.html",
    "title": "Class SinglyLinkedListNode<T> | Advanced Algorithms",
    "keywords": "Class SinglyLinkedListNode<T> Singly linked list node. Inheritance Object SinglyLinkedListNode<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SinglyLinkedListNode<T> Type Parameters Name Description T Constructors SinglyLinkedListNode(T) Declaration public SinglyLinkedListNode(T data) Parameters Type Name Description T data Fields Data Declaration public T Data Field Value Type Description T Next Declaration public SinglyLinkedListNode<T> Next Field Value Type Description SinglyLinkedListNode <T>"
  },
  "api/Advanced.Algorithms.DataStructures.SkipList-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SkipList-1.html",
    "title": "Class SkipList<T> | Advanced Algorithms",
    "keywords": "Class SkipList<T> A skip list implementation with IEnumerable support. Inheritance Object SkipList<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SkipList<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T The data type of thi skip list. Constructors SkipList(Int32) Declaration public SkipList(int maxHeight = 32) Parameters Type Name Description Int32 maxHeight The maximum height. Fields MaxHeight The maximum height of this skip list with which it was initialized. Declaration public readonly int MaxHeight Field Value Type Description Int32 Properties Count The number of elements in this skip list. Declaration public int Count { get; } Property Value Type Description Int32 Methods Delete(T) Deletes the given value from this skip list. Will throw exception if the value does'nt exist in this skip list. Time complexity: O(log(n)) Declaration public void Delete(T value) Parameters Type Name Description T value The value to delete. Find(T) Finds the given value in this skip list. If item is not found default value of T will be returned. Time complexity: O(log(n)). Declaration public T Find(T value) Parameters Type Name Description T value Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Insert(T) Inserts the given value to this skip list. Will throw exception if the value already exists. Time complexity: O(log(n)) Declaration public void Insert(T value) Parameters Type Name Description T value The value to insert. Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.SparseSet.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SparseSet.html",
    "title": "Class SparseSet | Advanced Algorithms",
    "keywords": "Class SparseSet A sparse set implementation. Inheritance Object SparseSet Implements IEnumerable < Int32 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SparseSet : IEnumerable<int>, IEnumerable Constructors SparseSet(Int32, Int32) Declaration public SparseSet(int maxVal, int capacity) Parameters Type Name Description Int32 maxVal Int32 capacity Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(Int32) Time complexity: O(1). Declaration public void Add(int value) Parameters Type Name Description Int32 value Clear() Time complexity: O(1). Declaration public void Clear() GetEnumerator() Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > HasItem(Int32) Time complexity: O(1). Declaration public bool HasItem(int value) Parameters Type Name Description Int32 value Returns Type Description Boolean Remove(Int32) Time complexity: O(1). Declaration public void Remove(int value) Parameters Type Name Description Int32 value Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.SplayTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SplayTree-1.html",
    "title": "Class SplayTree<T> | Advanced Algorithms",
    "keywords": "Class SplayTree<T> A splay tree implementation. Inheritance Object SplayTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SplayTree<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors SplayTree() Declaration public SplayTree() SplayTree(IEnumerable<T>) Initialize the BST with given sorted keys. Time complexity: O(n). Declaration public SplayTree(IEnumerable<T> sortedCollection) Parameters Type Name Description IEnumerable <T> sortedCollection The sorted collection. Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods AsEnumerableDesc() Descending enumerable. Declaration public IEnumerable<T> AsEnumerableDesc() Returns Type Description IEnumerable <T> Delete(T) Time complexity: O(n) Declaration public void Delete(T value) Parameters Type Name Description T value ElementAt(Int32) Time complexity: O(log(n)) Declaration public T ElementAt(int index) Parameters Type Name Description Int32 index Returns Type Description T FindMax() Time complexity: O(n) Declaration public T FindMax() Returns Type Description T FindMin() Time complexity: O(n) Declaration public T FindMin() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetEnumeratorDesc() Declaration public IEnumerator<T> GetEnumeratorDesc() Returns Type Description IEnumerator <T> HasItem(T) Time complexity: O(n) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean IndexOf(T) Time complexity: O(log(n)) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 Insert(T) Time complexity: O(n) Declaration public void Insert(T value) Parameters Type Name Description T value NextHigher(T) Get the next higher value to given value in this BST. Time complexity: O(n). Declaration public T NextHigher(T value) Parameters Type Name Description T value Returns Type Description T NextLower(T) Get the next lower value to given value in this BST. Time complexity: O(n). Declaration public T NextLower(T value) Parameters Type Name Description T value Returns Type Description T RemoveAt(Int32) Time complexity: O(log(n)) Declaration public T RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.SuffixTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.SuffixTree-1.html",
    "title": "Class SuffixTree<T> | Advanced Algorithms",
    "keywords": "Class SuffixTree<T> A suffix tree implementation using a trie. Inheritance Object SuffixTree<T> Implements IEnumerable <T[]> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class SuffixTree<T> : IEnumerable<T[]>, IEnumerable Type Parameters Name Description T Constructors SuffixTree() Declaration public SuffixTree() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Contains(T[]) Returns true if the given entry pattern is in this suffix tree. Time complexity: O(e) where e is the length of the given entry. Declaration public bool Contains(T[] pattern) Parameters Type Name Description T[] pattern Returns Type Description Boolean Delete(T[]) Deletes an existing entry from this suffix tree. Time complexity: O(m^2) where m is the length of entry array. Declaration public void Delete(T[] entry) Parameters Type Name Description T[] entry GetEnumerator() Declaration public IEnumerator<T[]> GetEnumerator() Returns Type Description IEnumerator <T[]> Insert(T[]) Insert a new entry to this suffix tree. Time complexity: O(m^2) where m is the length of entry array. Declaration public void Insert(T[] entry) Parameters Type Name Description T[] entry StartsWith(T[]) Returns all sub-entries that starts with this search pattern. Time complexity: O(rm) where r is the number of results and m is the average length of each entry. Declaration public List<T[]> StartsWith(T[] pattern) Parameters Type Name Description T[] pattern Returns Type Description List <T[]> Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.TernarySearchTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TernarySearchTree-1.html",
    "title": "Class TernarySearchTree<T> | Advanced Algorithms",
    "keywords": "Class TernarySearchTree<T> A ternary search tree implementation. Inheritance Object TernarySearchTree<T> Implements IEnumerable <T[]> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TernarySearchTree<T> : IEnumerable<T[]>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors TernarySearchTree() Declaration public TernarySearchTree() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Contains(T[]) Returns true if the entry exist. Time complexity: O(e) where e is the length of the given entry. Declaration public bool Contains(T[] entry) Parameters Type Name Description T[] entry Returns Type Description Boolean ContainsPrefix(T[]) Returns true if the entry prefix exist. Time complexity: O(e) where e is the length of the given entry. Declaration public bool ContainsPrefix(T[] entry) Parameters Type Name Description T[] entry Returns Type Description Boolean Delete(T[]) Deletes a record from this ternary search tree. Time complexity: O(m) where m is the length of entry. Declaration public void Delete(T[] entry) Parameters Type Name Description T[] entry GetEnumerator() Declaration public IEnumerator<T[]> GetEnumerator() Returns Type Description IEnumerator <T[]> Insert(T[]) Time complexity: O(m) where m is the length of entry. Declaration public void Insert(T[] entry) Parameters Type Name Description T[] entry StartsWith(T[]) Returns a list of records matching this prefix. Time complexity: O(rm) where r is the number of results and m is the average length of each entry. Declaration public List<T[]> StartsWith(T[] prefix) Parameters Type Name Description T[] prefix Returns Type Description List <T[]> Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.TreapTree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.TreapTree-1.html",
    "title": "Class TreapTree<T> | Advanced Algorithms",
    "keywords": "Class TreapTree<T> A treap tree implementation. Inheritance Object TreapTree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class TreapTree<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Constructors TreapTree() Declaration public TreapTree() TreapTree(IEnumerable<T>) Initialize the BST with given sorted keys. Time complexity: O(n). Declaration public TreapTree(IEnumerable<T> sortedCollection) Parameters Type Name Description IEnumerable <T> sortedCollection The initial sorted collection. Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods AsEnumerableDesc() Descending enumerable. Declaration public IEnumerable<T> AsEnumerableDesc() Returns Type Description IEnumerable <T> Delete(T) Time complexity: O(log(n)) Declaration public void Delete(T value) Parameters Type Name Description T value ElementAt(Int32) Time complexity: O(log(n)) Declaration public T ElementAt(int index) Parameters Type Name Description Int32 index Returns Type Description T FindMax() Time complexity: O(log(n)) Declaration public T FindMax() Returns Type Description T FindMin() Time complexity: O(log(n)) Declaration public T FindMin() Returns Type Description T GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetEnumeratorDesc() Declaration public IEnumerator<T> GetEnumeratorDesc() Returns Type Description IEnumerator <T> HasItem(T) Time complexity: O(log(n)) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean IndexOf(T) Time complexity: O(log(n)) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 Insert(T) Time complexity: O(log(n)) Declaration public void Insert(T value) Parameters Type Name Description T value NextHigher(T) Get the next higher value to given value in this BST. Time complexity: O(n). Declaration public T NextHigher(T value) Parameters Type Name Description T value Returns Type Description T NextLower(T) Get the next lower value to given value in this BST. Time complexity: O(n). Declaration public T NextLower(T value) Parameters Type Name Description T value Returns Type Description T RemoveAt(Int32) Time complexity: O(log(n)) Declaration public T RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description T Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Tree-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Tree-1.html",
    "title": "Class Tree<T> | Advanced Algorithms",
    "keywords": "Class Tree<T> A tree implementation. Inheritance Object Tree<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Tree<T> : IEnumerable<T>, IEnumerable where T : IComparable Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Children(T) Time complexity: O(n) Declaration public IEnumerable<T> Children(T value) Parameters Type Name Description T value Returns Type Description IEnumerable <T> Delete(T) Time complexity: O(n) Declaration public void Delete(T value) Parameters Type Name Description T value GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetHeight() Time complexity: O(n) Declaration public int GetHeight() Returns Type Description Int32 HasItem(T) Time complexity: O(n) Declaration public bool HasItem(T value) Parameters Type Name Description T value Returns Type Description Boolean Insert(T, T) Time complexity: O(n) Declaration public void Insert(T parent, T child) Parameters Type Name Description T parent T child Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.DataStructures.Trie-1.html": {
    "href": "api/Advanced.Algorithms.DataStructures.Trie-1.html",
    "title": "Class Trie<T> | Advanced Algorithms",
    "keywords": "Class Trie<T> A trie (prefix tree) implementation. Inheritance Object Trie<T> Implements IEnumerable <T[]> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.DataStructures Assembly : Advanced.Algorithms.dll Syntax public class Trie<T> : IEnumerable<T[]>, IEnumerable Type Parameters Name Description T Constructors Trie() Declaration public Trie() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Contains(T[]) Returns true if the entry exist. Time complexity: O(e) where e is the length of the given entry. Declaration public bool Contains(T[] entry) Parameters Type Name Description T[] entry Returns Type Description Boolean ContainsPrefix(T[]) Returns true if any records match this prefix. Time complexity: O(e) where e is the length of the given entry. Declaration public bool ContainsPrefix(T[] prefix) Parameters Type Name Description T[] prefix Returns Type Description Boolean Delete(T[]) Deletes a record from this trie. Time complexity: O(m) where m is the length of entry. Declaration public void Delete(T[] entry) Parameters Type Name Description T[] entry GetEnumerator() Declaration public IEnumerator<T[]> GetEnumerator() Returns Type Description IEnumerator <T[]> Insert(T[]) Insert a new record to this trie. Time complexity: O(m) where m is the length of entry. Declaration public void Insert(T[] entry) Parameters Type Name Description T[] entry StartsWith(T[]) Returns a list of records matching this prefix. Time complexity: O(rm) where r is the number of results and m is the average length of each entry. Declaration public List<T[]> StartsWith(T[] prefix) Parameters Type Name Description T[] prefix Returns Type Description List <T[]> Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Advanced.Algorithms.Distributed.AsyncQueue-1.html": {
    "href": "api/Advanced.Algorithms.Distributed.AsyncQueue-1.html",
    "title": "Class AsyncQueue<T> | Advanced Algorithms",
    "keywords": "Class AsyncQueue<T> A simple asynchronous multi-thread supporting producer/consumer FIFO queue with minimal locking. Inheritance Object AsyncQueue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Distributed Assembly : Advanced.Algorithms.dll Syntax public class AsyncQueue<T> Type Parameters Name Description T Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods DequeueAsync(Int32, CancellationToken) Supports multi-threaded consumers. Time complexity: O(1). Declaration public Task<T> DequeueAsync(int millisecondsTimeout = 2147483647, CancellationToken taskCancellationToken = default(CancellationToken)) Parameters Type Name Description Int32 millisecondsTimeout CancellationToken taskCancellationToken Returns Type Description Task <T> EnqueueAsync(T, Int32, CancellationToken) Supports multi-threaded producers. Time complexity: O(1). Declaration public Task EnqueueAsync(T value, int millisecondsTimeout = 2147483647, CancellationToken taskCancellationToken = default(CancellationToken)) Parameters Type Name Description T value Int32 millisecondsTimeout CancellationToken taskCancellationToken Returns Type Description Task"
  },
  "api/Advanced.Algorithms.Distributed.CircularQueue-1.html": {
    "href": "api/Advanced.Algorithms.Distributed.CircularQueue-1.html",
    "title": "Class CircularQueue<T> | Advanced Algorithms",
    "keywords": "Class CircularQueue<T> Cicular queue aka Ring Buffer using fixed size array. Inheritance Object CircularQueue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Distributed Assembly : Advanced.Algorithms.dll Syntax public class CircularQueue<T> Type Parameters Name Description T Constructors CircularQueue(Int32) Declaration public CircularQueue(int size) Parameters Type Name Description Int32 size Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Dequeue() O(1) Time complexity. Declaration public T Dequeue() Returns Type Description T Dequeue(Int32) Time complexity: O(n). Declaration public IEnumerable<T> Dequeue(int bulkNumber) Parameters Type Name Description Int32 bulkNumber Returns Type Description IEnumerable <T> Enqueue(T) Note: When buffer overflows oldest data will be erased. Time complexity: O(1) Declaration public T Enqueue(T data) Parameters Type Name Description T data Returns Type Description T Enqueue(T[]) Time complexity: O(n). Declaration public IEnumerable<T> Enqueue(T[] bulk) Parameters Type Name Description T[] bulk Returns Type Description IEnumerable <T> Deleted items."
  },
  "api/Advanced.Algorithms.Distributed.ConsistentHash-1.html": {
    "href": "api/Advanced.Algorithms.Distributed.ConsistentHash-1.html",
    "title": "Class ConsistentHash<T> | Advanced Algorithms",
    "keywords": "Class ConsistentHash<T> A consistant hash implementation with murmur hash. Inheritance Object ConsistentHash<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Distributed Assembly : Advanced.Algorithms.dll Syntax public class ConsistentHash<T> Type Parameters Name Description T Constructors ConsistentHash() Declaration public ConsistentHash() ConsistentHash(IEnumerable<T>, Int32) Declaration public ConsistentHash(IEnumerable<T> nodes, int replicas) Parameters Type Name Description IEnumerable <T> nodes Int32 replicas Methods AddNode(T) Add a new bucket. Declaration public void AddNode(T node) Parameters Type Name Description T node GetNode(String) Get the bucket for the given Key. Declaration public T GetNode(string key) Parameters Type Name Description String key Returns Type Description T RemoveNode(T) Remove a bucket from lookup. Declaration public void RemoveNode(T node) Parameters Type Name Description T node"
  },
  "api/Advanced.Algorithms.Distributed.html": {
    "href": "api/Advanced.Algorithms.Distributed.html",
    "title": "Namespace Advanced.Algorithms.Distributed | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Distributed Classes AsyncQueue<T> A simple asynchronous multi-thread supporting producer/consumer FIFO queue with minimal locking. CircularQueue<T> Cicular queue aka Ring Buffer using fixed size array. ConsistentHash<T> A consistant hash implementation with murmur hash. LRUCache<K, V> A least recently used cache implemetation."
  },
  "api/Advanced.Algorithms.Distributed.LRUCache-2.html": {
    "href": "api/Advanced.Algorithms.Distributed.LRUCache-2.html",
    "title": "Class LRUCache<K, V> | Advanced Algorithms",
    "keywords": "Class LRUCache<K, V> A least recently used cache implemetation. Inheritance Object LRUCache<K, V> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Distributed Assembly : Advanced.Algorithms.dll Syntax public class LRUCache<K, V> Type Parameters Name Description K V Constructors LRUCache(Int32) Declaration public LRUCache(int capacity) Parameters Type Name Description Int32 capacity Methods Get(K) Time complexity: O(1). Declaration public V Get(K key) Parameters Type Name Description K key Returns Type Description V Put(K, V) Time complexity: O(1). Declaration public void Put(K key, V value) Parameters Type Name Description K key V value"
  },
  "api/Advanced.Algorithms.Geometry.BentleyOttmann.html": {
    "href": "api/Advanced.Algorithms.Geometry.BentleyOttmann.html",
    "title": "Class BentleyOttmann | Advanced Algorithms",
    "keywords": "Class BentleyOttmann Bentley-Ottmann sweep line algorithm to find line intersections. Inheritance Object BentleyOttmann Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class BentleyOttmann Constructors BentleyOttmann(Int32) Declaration public BentleyOttmann(int precision = 5) Parameters Type Name Description Int32 precision Methods FindIntersections(IEnumerable<Line>) Declaration public Dictionary<Point, List<Line>> FindIntersections(IEnumerable<Line> lineSegments) Parameters Type Name Description IEnumerable < Line > lineSegments Returns Type Description Dictionary < Point , List < Line >>"
  },
  "api/Advanced.Algorithms.Geometry.ClosestPointPair.html": {
    "href": "api/Advanced.Algorithms.Geometry.ClosestPointPair.html",
    "title": "Class ClosestPointPair | Advanced Algorithms",
    "keywords": "Class ClosestPointPair Closest-point pair finder. Inheritance Object ClosestPointPair Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class ClosestPointPair Methods Find(List<Point>, Int32, Int32) Declaration public static double Find(List<Point> points, int left, int right) Parameters Type Name Description List < Point > points Int32 left Int32 right Returns Type Description Double Find(List<Int32[]>) Declaration public static double Find(List<int[]> points) Parameters Type Name Description List < Int32 []> points Returns Type Description Double"
  },
  "api/Advanced.Algorithms.Geometry.ConvexHull.html": {
    "href": "api/Advanced.Algorithms.Geometry.ConvexHull.html",
    "title": "Class ConvexHull | Advanced Algorithms",
    "keywords": "Class ConvexHull Convex hull using jarvis's algorithm. Inheritance Object ConvexHull Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class ConvexHull Methods Find(List<Int32[]>) Declaration public static List<int[]> Find(List<int[]> points) Parameters Type Name Description List < Int32 []> points Returns Type Description List < Int32 []>"
  },
  "api/Advanced.Algorithms.Geometry.html": {
    "href": "api/Advanced.Algorithms.Geometry.html",
    "title": "Namespace Advanced.Algorithms.Geometry | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Geometry Classes BentleyOttmann Bentley-Ottmann sweep line algorithm to find line intersections. ClosestPointPair Closest-point pair finder. ConvexHull Convex hull using jarvis's algorithm. Line Line object. LineExtensions Line extensions. LineIntersection Line intersection computer. Point Point object. PointComparer Compares two points for geometric equality implementing IEqualityComparer. PointInsidePolygon Check whether a given point is inside given polygon. PointRotation Rotates given point by given angle about given center. Polygon Polygon object. Rectangle Rectangle object. RectangleComparer Compares two rectangles for geometrical equality implementing IEqualityComparer. RectangleIntersection Rectangle intersection finder."
  },
  "api/Advanced.Algorithms.Geometry.Line.html": {
    "href": "api/Advanced.Algorithms.Geometry.Line.html",
    "title": "Class Line | Advanced Algorithms",
    "keywords": "Class Line Line object. Inheritance Object Line Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class Line Constructors Line(Point, Point, Int32) Declaration public Line(Point start, Point end, int precision = 5) Parameters Type Name Description Point start Point end Int32 precision Properties IsHorizontal Declaration public bool IsHorizontal { get; } Property Value Type Description Boolean IsVertical Declaration public bool IsVertical { get; } Property Value Type Description Boolean Left Declaration public Point Left { get; } Property Value Type Description Point Right Declaration public Point Right { get; } Property Value Type Description Point Slope Declaration public double Slope { get; } Property Value Type Description Double Methods Clone() Declaration public Line Clone() Returns Type Description Line Extension Methods LineExtensions.Intersects(Line, Line, Int32) LineExtensions.Intersection(Line, Line, Int32)"
  },
  "api/Advanced.Algorithms.Geometry.LineExtensions.html": {
    "href": "api/Advanced.Algorithms.Geometry.LineExtensions.html",
    "title": "Class LineExtensions | Advanced Algorithms",
    "keywords": "Class LineExtensions Line extensions. Inheritance Object LineExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public static class LineExtensions Methods Intersection(Line, Line, Int32) Declaration public static Point Intersection(this Line lineA, Line lineB, int precision = 5) Parameters Type Name Description Line lineA Line lineB Int32 precision Returns Type Description Point Intersects(Line, Line, Int32) Declaration public static bool Intersects(this Line lineA, Line lineB, int precision = 5) Parameters Type Name Description Line lineA Line lineB Int32 precision Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Geometry.LineIntersection.html": {
    "href": "api/Advanced.Algorithms.Geometry.LineIntersection.html",
    "title": "Class LineIntersection | Advanced Algorithms",
    "keywords": "Class LineIntersection Line intersection computer. Inheritance Object LineIntersection Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class LineIntersection Methods Find(Line, Line, Int32) Returns Point of intersection if do intersect otherwise default Point (null). Declaration public static Point Find(Line lineA, Line lineB, int precision = 5) Parameters Type Name Description Line lineA Line lineB Int32 precision precision tolerance. Returns Type Description Point The point of intersection."
  },
  "api/Advanced.Algorithms.Geometry.Point.html": {
    "href": "api/Advanced.Algorithms.Geometry.Point.html",
    "title": "Class Point | Advanced Algorithms",
    "keywords": "Class Point Point object. Inheritance Object Point Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class Point Constructors Point(Double, Double) Declaration public Point(double x, double y) Parameters Type Name Description Double x Double y Properties X Declaration public double X { get; } Property Value Type Description Double Y Declaration public double Y { get; } Property Value Type Description Double Methods Clone() Declaration public Point Clone() Returns Type Description Point ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Advanced.Algorithms.Geometry.PointComparer.html": {
    "href": "api/Advanced.Algorithms.Geometry.PointComparer.html",
    "title": "Class PointComparer | Advanced Algorithms",
    "keywords": "Class PointComparer Compares two points for geometric equality implementing IEqualityComparer. Inheritance Object PointComparer Implements IEqualityComparer < Point > Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class PointComparer : IEqualityComparer<Point> Methods Equals(Point, Point) Declaration public bool Equals(Point x, Point y) Parameters Type Name Description Point x Point y Returns Type Description Boolean GetHashCode(Point) Declaration public int GetHashCode(Point point) Parameters Type Name Description Point point Returns Type Description Int32 Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "api/Advanced.Algorithms.Geometry.PointInsidePolygon.html": {
    "href": "api/Advanced.Algorithms.Geometry.PointInsidePolygon.html",
    "title": "Class PointInsidePolygon | Advanced Algorithms",
    "keywords": "Class PointInsidePolygon Check whether a given point is inside given polygon. Inheritance Object PointInsidePolygon Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class PointInsidePolygon Methods IsInside(Polygon, Point) Declaration public static bool IsInside(Polygon polygon, Point point) Parameters Type Name Description Polygon polygon Point point Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Geometry.PointRotation.html": {
    "href": "api/Advanced.Algorithms.Geometry.PointRotation.html",
    "title": "Class PointRotation | Advanced Algorithms",
    "keywords": "Class PointRotation Rotates given point by given angle about given center. Inheritance Object PointRotation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class PointRotation Methods Rotate(Point, Point, Int32) Declaration public static Point Rotate(Point center, Point point, int angle) Parameters Type Name Description Point center Point point Int32 angle Returns Type Description Point"
  },
  "api/Advanced.Algorithms.Geometry.Polygon.html": {
    "href": "api/Advanced.Algorithms.Geometry.Polygon.html",
    "title": "Class Polygon | Advanced Algorithms",
    "keywords": "Class Polygon Polygon object. Inheritance Object Polygon Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class Polygon Constructors Polygon(List<Line>) Create a polygon with given edges lines. Declaration public Polygon(List<Line> edges) Parameters Type Name Description List < Line > edges Polygon(List<Point>) Create polygon from the given list of consecutive boundary end points. Last and first points will be connected. If only one edge point is provided then this polygon will behave like a point, a line is created with both ends having same edge point. Declaration public Polygon(List<Point> edgePoints) Parameters Type Name Description List < Point > edgePoints Properties Edges Declaration public List<Line> Edges { get; set; } Property Value Type Description List < Line >"
  },
  "api/Advanced.Algorithms.Geometry.Rectangle.html": {
    "href": "api/Advanced.Algorithms.Geometry.Rectangle.html",
    "title": "Class Rectangle | Advanced Algorithms",
    "keywords": "Class Rectangle Rectangle object. Inheritance Object Rectangle Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class Rectangle Constructors Rectangle() Declaration public Rectangle() Rectangle(Point, Point) Declaration public Rectangle(Point leftTop, Point rightBottom) Parameters Type Name Description Point leftTop Point rightBottom Properties LeftTop Declaration public Point LeftTop { get; set; } Property Value Type Description Point RightBottom Declaration public Point RightBottom { get; set; } Property Value Type Description Point Methods ToPolygon() Declaration public Polygon ToPolygon() Returns Type Description Polygon"
  },
  "api/Advanced.Algorithms.Geometry.RectangleComparer.html": {
    "href": "api/Advanced.Algorithms.Geometry.RectangleComparer.html",
    "title": "Class RectangleComparer | Advanced Algorithms",
    "keywords": "Class RectangleComparer Compares two rectangles for geometrical equality implementing IEqualityComparer. Inheritance Object RectangleComparer Implements IEqualityComparer < Rectangle > Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class RectangleComparer : IEqualityComparer<Rectangle> Methods Equals(Rectangle, Rectangle) Declaration public bool Equals(Rectangle x, Rectangle y) Parameters Type Name Description Rectangle x Rectangle y Returns Type Description Boolean GetHashCode(Rectangle) Declaration public int GetHashCode(Rectangle rectangle) Parameters Type Name Description Rectangle rectangle Returns Type Description Int32 Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "api/Advanced.Algorithms.Geometry.RectangleIntersection.html": {
    "href": "api/Advanced.Algorithms.Geometry.RectangleIntersection.html",
    "title": "Class RectangleIntersection | Advanced Algorithms",
    "keywords": "Class RectangleIntersection Rectangle intersection finder. Inheritance Object RectangleIntersection Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Geometry Assembly : Advanced.Algorithms.dll Syntax public class RectangleIntersection Methods DoIntersect(Rectangle, Rectangle) Declaration public static bool DoIntersect(Rectangle a, Rectangle b) Parameters Type Name Description Rectangle a Rectangle b Returns Type Description Boolean FindIntersection(Rectangle, Rectangle) Returns the rectangle formed by the intersection if do intersect. Otherwise default value of Rectangle struct. Declaration public static Rectangle FindIntersection(Rectangle a, Rectangle b) Parameters Type Name Description Rectangle a Rectangle b Returns Type Description Rectangle"
  },
  "api/Advanced.Algorithms.Graph.AllPairShortestPathResult-2.html": {
    "href": "api/Advanced.Algorithms.Graph.AllPairShortestPathResult-2.html",
    "title": "Class AllPairShortestPathResult<T, W> | Advanced Algorithms",
    "keywords": "Class AllPairShortestPathResult<T, W> All pairs shortest path algorithm result object. Inheritance Object AllPairShortestPathResult<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class AllPairShortestPathResult<T, W> where W : IComparable Type Parameters Name Description T W Constructors AllPairShortestPathResult(T, T, W, List<T>) Declaration public AllPairShortestPathResult(T source, T destination, W distance, List<T> path) Parameters Type Name Description T source T destination W distance List <T> path Properties Destination Declaration public T Destination { get; } Property Value Type Description T Distance Declaration public W Distance { get; } Property Value Type Description W Path Declaration public List<T> Path { get; } Property Value Type Description List <T> Source Declaration public T Source { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.Graph.AStarShortestPath-2.html": {
    "href": "api/Advanced.Algorithms.Graph.AStarShortestPath-2.html",
    "title": "Class AStarShortestPath<T, W> | Advanced Algorithms",
    "keywords": "Class AStarShortestPath<T, W> A* algorithm implementation using Fibonacci Heap. Inheritance Object AStarShortestPath<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class AStarShortestPath<T, W> where W : IComparable Type Parameters Name Description T W Constructors AStarShortestPath(IShortestPathOperators<W>, IAStarHeuristic<T, W>) Declaration public AStarShortestPath(IShortestPathOperators<W> operator, IAStarHeuristic<T, W> heuristic) Parameters Type Name Description IShortestPathOperators <W> operator IAStarHeuristic <T, W> heuristic Methods FindShortestPath(IGraph<T>, T, T) Search path to target using the heuristic. Declaration public ShortestPathResult<T, W> FindShortestPath(IGraph<T> graph, T source, T destination) Parameters Type Name Description IGraph <T> graph T source T destination Returns Type Description ShortestPathResult <T, W>"
  },
  "api/Advanced.Algorithms.Graph.BellmanFordShortestPath-2.html": {
    "href": "api/Advanced.Algorithms.Graph.BellmanFordShortestPath-2.html",
    "title": "Class BellmanFordShortestPath<T, W> | Advanced Algorithms",
    "keywords": "Class BellmanFordShortestPath<T, W> A Bellman Ford algorithm implementation. Inheritance Object BellmanFordShortestPath<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class BellmanFordShortestPath<T, W> where W : IComparable Type Parameters Name Description T W Constructors BellmanFordShortestPath(IShortestPathOperators<W>) Declaration public BellmanFordShortestPath(IShortestPathOperators<W> operator) Parameters Type Name Description IShortestPathOperators <W> operator Methods FindShortestPath(IDiGraph<T>, T, T) Find shortest distance to target. Declaration public ShortestPathResult<T, W> FindShortestPath(IDiGraph<T> graph, T source, T destination) Parameters Type Name Description IDiGraph <T> graph T source T destination Returns Type Description ShortestPathResult <T, W>"
  },
  "api/Advanced.Algorithms.Graph.BiDirectional-1.html": {
    "href": "api/Advanced.Algorithms.Graph.BiDirectional-1.html",
    "title": "Class BiDirectional<T> | Advanced Algorithms",
    "keywords": "Class BiDirectional<T> A BiDirectional Path Search on DiGraph. Inheritance Object BiDirectional<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class BiDirectional<T> Type Parameters Name Description T Methods PathExists(IGraph<T>, T, T) Returns true if Path exists from source to destination. Declaration public bool PathExists(IGraph<T> graph, T source, T destination) Parameters Type Name Description IGraph <T> graph T source T destination Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Graph.BiPartiteMatching-1.html": {
    "href": "api/Advanced.Algorithms.Graph.BiPartiteMatching-1.html",
    "title": "Class BiPartiteMatching<T> | Advanced Algorithms",
    "keywords": "Class BiPartiteMatching<T> Compute Max BiParitite Edges using Ford-Fukerson algorithm. Inheritance Object BiPartiteMatching<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class BiPartiteMatching<T> Type Parameters Name Description T Constructors BiPartiteMatching(IBiPartiteMatchOperators<T>) Declaration public BiPartiteMatching(IBiPartiteMatchOperators<T> operator) Parameters Type Name Description IBiPartiteMatchOperators <T> operator Methods GetMaxBiPartiteMatching(IGraph<T>) Returns a list of Max BiPartite Match Edges. Declaration public List<MatchEdge<T>> GetMaxBiPartiteMatching(IGraph<T> graph) Parameters Type Name Description IGraph <T> graph Returns Type Description List < MatchEdge <T>>"
  },
  "api/Advanced.Algorithms.Graph.BreadthFirst-1.html": {
    "href": "api/Advanced.Algorithms.Graph.BreadthFirst-1.html",
    "title": "Class BreadthFirst<T> | Advanced Algorithms",
    "keywords": "Class BreadthFirst<T> Bread First Search implementation. Inheritance Object BreadthFirst<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class BreadthFirst<T> Type Parameters Name Description T Methods Find(IGraph<T>, T) Returns true if item exists. Declaration public bool Find(IGraph<T> graph, T vertex) Parameters Type Name Description IGraph <T> graph T vertex Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Graph.Bridge-1.html": {
    "href": "api/Advanced.Algorithms.Graph.Bridge-1.html",
    "title": "Class Bridge<T> | Advanced Algorithms",
    "keywords": "Class Bridge<T> The bridge object. Inheritance Object Bridge<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class Bridge<T> Type Parameters Name Description T Constructors Bridge(T, T) Declaration public Bridge(T vertexA, T vertexB) Parameters Type Name Description T vertexA T vertexB Properties vertexA Declaration public T vertexA { get; } Property Value Type Description T vertexB Declaration public T vertexB { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.Graph.CycleDetector-1.html": {
    "href": "api/Advanced.Algorithms.Graph.CycleDetector-1.html",
    "title": "Class CycleDetector<T> | Advanced Algorithms",
    "keywords": "Class CycleDetector<T> Cycle detection using Depth First Search. Inheritance Object CycleDetector<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class CycleDetector<T> Type Parameters Name Description T Methods HasCycle(IDiGraph<T>) Returns true if a cycle exists Declaration public bool HasCycle(IDiGraph<T> graph) Parameters Type Name Description IDiGraph <T> graph Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Graph.DepthFirst-1.html": {
    "href": "api/Advanced.Algorithms.Graph.DepthFirst-1.html",
    "title": "Class DepthFirst<T> | Advanced Algorithms",
    "keywords": "Class DepthFirst<T> Depth First Search. Inheritance Object DepthFirst<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class DepthFirst<T> Type Parameters Name Description T Methods Find(IGraph<T>, T) Returns true if item exists. Declaration public bool Find(IGraph<T> graph, T vertex) Parameters Type Name Description IGraph <T> graph T vertex Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Graph.DepthFirstTopSort-1.html": {
    "href": "api/Advanced.Algorithms.Graph.DepthFirstTopSort-1.html",
    "title": "Class DepthFirstTopSort<T> | Advanced Algorithms",
    "keywords": "Class DepthFirstTopSort<T> Find Toplogical order of a graph using Depth First Search. Inheritance Object DepthFirstTopSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class DepthFirstTopSort<T> Type Parameters Name Description T Methods GetTopSort(IDiGraph<T>) Returns the vertices in Topologically Sorted Order. Declaration public List<T> GetTopSort(IDiGraph<T> graph) Parameters Type Name Description IDiGraph <T> graph Returns Type Description List <T>"
  },
  "api/Advanced.Algorithms.Graph.DijikstraShortestPath-2.html": {
    "href": "api/Advanced.Algorithms.Graph.DijikstraShortestPath-2.html",
    "title": "Class DijikstraShortestPath<T, W> | Advanced Algorithms",
    "keywords": "Class DijikstraShortestPath<T, W> A dijikstra algorithm implementation using Fibonacci Heap. Inheritance Object DijikstraShortestPath<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class DijikstraShortestPath<T, W> where W : IComparable Type Parameters Name Description T W Constructors DijikstraShortestPath(IShortestPathOperators<W>) Declaration public DijikstraShortestPath(IShortestPathOperators<W> operator) Parameters Type Name Description IShortestPathOperators <W> operator Methods FindShortestPath(IGraph<T>, T, T) Get shortest distance to target. Declaration public ShortestPathResult<T, W> FindShortestPath(IGraph<T> graph, T source, T destination) Parameters Type Name Description IGraph <T> graph T source T destination Returns Type Description ShortestPathResult <T, W>"
  },
  "api/Advanced.Algorithms.Graph.EdmondKarpMaxFlow-2.html": {
    "href": "api/Advanced.Algorithms.Graph.EdmondKarpMaxFlow-2.html",
    "title": "Class EdmondKarpMaxFlow<T, W> | Advanced Algorithms",
    "keywords": "Class EdmondKarpMaxFlow<T, W> An Edmond Karp max flow implementation on weighted directed graph using adjacency list representation of graph and residual graph. Inheritance Object EdmondKarpMaxFlow<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class EdmondKarpMaxFlow<T, W> where W : IComparable Type Parameters Name Description T W Constructors EdmondKarpMaxFlow(IFlowOperators<W>) Declaration public EdmondKarpMaxFlow(IFlowOperators<W> operator) Parameters Type Name Description IFlowOperators <W> operator Methods ComputeMaxFlow(IDiGraph<T>, T, T) Compute max flow by searching a path and then augmenting the residual graph until no more path exists in residual graph with possible flow. Declaration public W ComputeMaxFlow(IDiGraph<T> graph, T source, T sink) Parameters Type Name Description IDiGraph <T> graph T source T sink Returns Type Description W computeMaxFlowAndReturnResidualGraph(IDiGraph<T>, T, T) Compute max flow by searching a path and then augmenting the residual graph until no more path exists in residual graph with possible flow. Declaration public WeightedDiGraph<T, W> computeMaxFlowAndReturnResidualGraph(IDiGraph<T> graph, T source, T sink) Parameters Type Name Description IDiGraph <T> graph T source T sink Returns Type Description WeightedDiGraph <T, W>"
  },
  "api/Advanced.Algorithms.Graph.FloydWarshallShortestPath-2.html": {
    "href": "api/Advanced.Algorithms.Graph.FloydWarshallShortestPath-2.html",
    "title": "Class FloydWarshallShortestPath<T, W> | Advanced Algorithms",
    "keywords": "Class FloydWarshallShortestPath<T, W> A floyd-warshall shortest path algorithm implementation. Inheritance Object FloydWarshallShortestPath<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class FloydWarshallShortestPath<T, W> where W : IComparable Type Parameters Name Description T W Constructors FloydWarshallShortestPath(IShortestPathOperators<W>) Declaration public FloydWarshallShortestPath(IShortestPathOperators<W> operator) Parameters Type Name Description IShortestPathOperators <W> operator Methods FindAllPairShortestPaths(IGraph<T>) Declaration public List<AllPairShortestPathResult<T, W>> FindAllPairShortestPaths(IGraph<T> graph) Parameters Type Name Description IGraph <T> graph Returns Type Description List < AllPairShortestPathResult <T, W>>"
  },
  "api/Advanced.Algorithms.Graph.FordFulkersonMaxFlow-2.html": {
    "href": "api/Advanced.Algorithms.Graph.FordFulkersonMaxFlow-2.html",
    "title": "Class FordFulkersonMaxFlow<T, W> | Advanced Algorithms",
    "keywords": "Class FordFulkersonMaxFlow<T, W> A ford-fulkerson max flox implementation on weighted directed graph using adjacency list representation of graph and residual graph. Inheritance Object FordFulkersonMaxFlow<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class FordFulkersonMaxFlow<T, W> where W : IComparable Type Parameters Name Description T W Constructors FordFulkersonMaxFlow(IFlowOperators<W>) Declaration public FordFulkersonMaxFlow(IFlowOperators<W> operator) Parameters Type Name Description IFlowOperators <W> operator Methods ComputeMaxFlow(IDiGraph<T>, T, T) Compute max flow by searching a path and then augmenting the residual graph until no more path exists in residual graph with possible flow. Declaration public W ComputeMaxFlow(IDiGraph<T> graph, T source, T sink) Parameters Type Name Description IDiGraph <T> graph T source T sink Returns Type Description W ComputeMaxFlowAndReturnFlowPath(IDiGraph<T>, T, T) Return all flow Paths. Declaration public List<List<T>> ComputeMaxFlowAndReturnFlowPath(IDiGraph<T> graph, T source, T sink) Parameters Type Name Description IDiGraph <T> graph T source T sink Returns Type Description List < List <T>>"
  },
  "api/Advanced.Algorithms.Graph.html": {
    "href": "api/Advanced.Algorithms.Graph.html",
    "title": "Namespace Advanced.Algorithms.Graph | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Graph Classes AllPairShortestPathResult<T, W> All pairs shortest path algorithm result object. AStarShortestPath<T, W> A* algorithm implementation using Fibonacci Heap. BellmanFordShortestPath<T, W> A Bellman Ford algorithm implementation. BiDirectional<T> A BiDirectional Path Search on DiGraph. BiPartiteMatching<T> Compute Max BiParitite Edges using Ford-Fukerson algorithm. BreadthFirst<T> Bread First Search implementation. Bridge<T> The bridge object. CycleDetector<T> Cycle detection using Depth First Search. DepthFirst<T> Depth First Search. DepthFirstTopSort<T> Find Toplogical order of a graph using Depth First Search. DijikstraShortestPath<T, W> A dijikstra algorithm implementation using Fibonacci Heap. EdmondKarpMaxFlow<T, W> An Edmond Karp max flow implementation on weighted directed graph using adjacency list representation of graph and residual graph. FloydWarshallShortestPath<T, W> A floyd-warshall shortest path algorithm implementation. FordFulkersonMaxFlow<T, W> A ford-fulkerson max flox implementation on weighted directed graph using adjacency list representation of graph and residual graph. JohnsonsShortestPath<T, W> A Johnson's shortest path algorithm implementation. KahnsTopSort<T> Find Toplogical order of a graph using Kahn's algorithm. KosarajuStronglyConnected<T> A Kosaraju Strong Connected Component Algorithm Implementation. Kruskals<T, W> A Kruskal's alogorithm implementation using merge sort and disjoint set. MatchEdge<T> The match result object. MColorer<T, C> An m-coloring algorithm implementation. MColorResult<T, C> M-coloring result object. MinCut<T, W> Compute minimum cut edges of given graph using Edmond-Karps improved Ford-Fulkerson Max Flow Algorithm. MinCutEdge<T> Minimum cut result object. MinVertexCover<T> A minimum vertex conver algorithm implementation. MSTEdge<T, W> Minimum spanning tree edge object. Prims<T, W> A Prims algorithm implementation. PushRelabelMaxFlow<T, W> A Push-Relabel algorithm implementation. ShortestPathResult<T, W> Shortest path result object. TarjansArticulationFinder<T> Articulation point finder using Tarjan's algorithm. TarjansBiConnected<T> Finds if a graph is BiConnected. TarjansBridgeFinder<T> Bridge finder using Tarjan's algorithm. TarjansStronglyConnected<T> Strongly connected using Tarjan's algorithm. TravellingSalesman<T, W> Uses dynamic programming for a psuedo-polynomial time runTime complexity for this NP hard problem. Interfaces IAStarHeuristic<T, W> Search heuristic used by A* search algorithm. IBiPartiteMatchOperators<T> Generic operator interface required by BiPartite matching algorithm. IFlowOperators<W> Operators to deal with generic Add, Substract etc on edge weights for flow algorithms such as ford-fulkerson algorithm. IJohnsonsShortestPathOperators<T, W> A concrete implementation of this interface is required by Johnson's algorithm. IShortestPathOperators<W> Generic operators interface required by shorted path algorithms."
  },
  "api/Advanced.Algorithms.Graph.IAStarHeuristic-2.html": {
    "href": "api/Advanced.Algorithms.Graph.IAStarHeuristic-2.html",
    "title": "Interface IAStarHeuristic<T, W> | Advanced Algorithms",
    "keywords": "Interface IAStarHeuristic<T, W> Search heuristic used by A* search algorithm. Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IAStarHeuristic<T, W> where W : IComparable Type Parameters Name Description T W Methods HueristicDistanceToTarget(T, T) Return the distance to target for given sourcevertex as computed by the hueristic used for A* search. Declaration W HueristicDistanceToTarget(T sourceVertex, T targetVertex) Parameters Type Name Description T sourceVertex T targetVertex Returns Type Description W"
  },
  "api/Advanced.Algorithms.Graph.IBiPartiteMatchOperators-1.html": {
    "href": "api/Advanced.Algorithms.Graph.IBiPartiteMatchOperators-1.html",
    "title": "Interface IBiPartiteMatchOperators<T> | Advanced Algorithms",
    "keywords": "Interface IBiPartiteMatchOperators<T> Generic operator interface required by BiPartite matching algorithm. Inherited Members IFlowOperators<Int32>.defaultWeight IFlowOperators<Int32>.MaxWeight IFlowOperators<Int32>.AddWeights(Int32, Int32) IFlowOperators<Int32>.SubstractWeights(Int32, Int32) Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IBiPartiteMatchOperators<T> : IFlowOperators<int> Type Parameters Name Description T Methods GetRandomUniqueVertex() Get a random unique vertex not in graph required for dummy source/destination vertex for ford-fulkerson max flow. Declaration T GetRandomUniqueVertex() Returns Type Description T"
  },
  "api/Advanced.Algorithms.Graph.IFlowOperators-1.html": {
    "href": "api/Advanced.Algorithms.Graph.IFlowOperators-1.html",
    "title": "Interface IFlowOperators<W> | Advanced Algorithms",
    "keywords": "Interface IFlowOperators<W> Operators to deal with generic Add, Substract etc on edge weights for flow algorithms such as ford-fulkerson algorithm. Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IFlowOperators<W> where W : IComparable Type Parameters Name Description W Properties defaultWeight default value for this type W. Declaration W defaultWeight { get; } Property Value Type Description W MaxWeight returns the max for this type W. Declaration W MaxWeight { get; } Property Value Type Description W Methods AddWeights(W, W) add two weights. Declaration W AddWeights(W a, W b) Parameters Type Name Description W a W b Returns Type Description W SubstractWeights(W, W) substract b from a. Declaration W SubstractWeights(W a, W b) Parameters Type Name Description W a W b Returns Type Description W"
  },
  "api/Advanced.Algorithms.Graph.IJohnsonsShortestPathOperators-2.html": {
    "href": "api/Advanced.Algorithms.Graph.IJohnsonsShortestPathOperators-2.html",
    "title": "Interface IJohnsonsShortestPathOperators<T, W> | Advanced Algorithms",
    "keywords": "Interface IJohnsonsShortestPathOperators<T, W> A concrete implementation of this interface is required by Johnson's algorithm. Inherited Members IShortestPathOperators<W>.DefaultValue IShortestPathOperators<W>.MaxValue IShortestPathOperators<W>.Sum(W, W) Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IJohnsonsShortestPathOperators<T, W> : IShortestPathOperators<W> where W : IComparable Type Parameters Name Description T W Methods RandomVertex() Gives a random vertex value not in the graph. Declaration T RandomVertex() Returns Type Description T Substract(W, W) Substract a from b. Declaration W Substract(W a, W b) Parameters Type Name Description W a W b Returns Type Description W"
  },
  "api/Advanced.Algorithms.Graph.IShortestPathOperators-1.html": {
    "href": "api/Advanced.Algorithms.Graph.IShortestPathOperators-1.html",
    "title": "Interface IShortestPathOperators<W> | Advanced Algorithms",
    "keywords": "Interface IShortestPathOperators<W> Generic operators interface required by shorted path algorithms. Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public interface IShortestPathOperators<W> where W : IComparable Type Parameters Name Description W Properties DefaultValue Declaration W DefaultValue { get; } Property Value Type Description W MaxValue Declaration W MaxValue { get; } Property Value Type Description W Methods Sum(W, W) Declaration W Sum(W a, W b) Parameters Type Name Description W a W b Returns Type Description W"
  },
  "api/Advanced.Algorithms.Graph.JohnsonsShortestPath-2.html": {
    "href": "api/Advanced.Algorithms.Graph.JohnsonsShortestPath-2.html",
    "title": "Class JohnsonsShortestPath<T, W> | Advanced Algorithms",
    "keywords": "Class JohnsonsShortestPath<T, W> A Johnson's shortest path algorithm implementation. Inheritance Object JohnsonsShortestPath<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class JohnsonsShortestPath<T, W> where W : IComparable Type Parameters Name Description T W Constructors JohnsonsShortestPath(IJohnsonsShortestPathOperators<T, W>) Declaration public JohnsonsShortestPath(IJohnsonsShortestPathOperators<T, W> operator) Parameters Type Name Description IJohnsonsShortestPathOperators <T, W> operator Methods FindAllPairShortestPaths(IDiGraph<T>) Declaration public List<AllPairShortestPathResult<T, W>> FindAllPairShortestPaths(IDiGraph<T> graph) Parameters Type Name Description IDiGraph <T> graph Returns Type Description List < AllPairShortestPathResult <T, W>>"
  },
  "api/Advanced.Algorithms.Graph.KahnsTopSort-1.html": {
    "href": "api/Advanced.Algorithms.Graph.KahnsTopSort-1.html",
    "title": "Class KahnsTopSort<T> | Advanced Algorithms",
    "keywords": "Class KahnsTopSort<T> Find Toplogical order of a graph using Kahn's algorithm. Inheritance Object KahnsTopSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class KahnsTopSort<T> Type Parameters Name Description T Methods GetTopSort(IDiGraph<T>) Returns the vertices in Topologically Sorted Order. Declaration public List<T> GetTopSort(IDiGraph<T> graph) Parameters Type Name Description IDiGraph <T> graph Returns Type Description List <T>"
  },
  "api/Advanced.Algorithms.Graph.KosarajuStronglyConnected-1.html": {
    "href": "api/Advanced.Algorithms.Graph.KosarajuStronglyConnected-1.html",
    "title": "Class KosarajuStronglyConnected<T> | Advanced Algorithms",
    "keywords": "Class KosarajuStronglyConnected<T> A Kosaraju Strong Connected Component Algorithm Implementation. Inheritance Object KosarajuStronglyConnected<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class KosarajuStronglyConnected<T> Type Parameters Name Description T Methods FindStronglyConnectedComponents(IDiGraph<T>) Returns all Connected Components using Kosaraju's Algorithm. Declaration public List<List<T>> FindStronglyConnectedComponents(IDiGraph<T> graph) Parameters Type Name Description IDiGraph <T> graph Returns Type Description List < List <T>>"
  },
  "api/Advanced.Algorithms.Graph.Kruskals-2.html": {
    "href": "api/Advanced.Algorithms.Graph.Kruskals-2.html",
    "title": "Class Kruskals<T, W> | Advanced Algorithms",
    "keywords": "Class Kruskals<T, W> A Kruskal's alogorithm implementation using merge sort and disjoint set. Inheritance Object Kruskals<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class Kruskals<T, W> where W : IComparable Type Parameters Name Description T W Methods FindMinimumSpanningTree(IGraph<T>) Find Minimum Spanning Tree of given weighted graph. Declaration public List<MSTEdge<T, W>> FindMinimumSpanningTree(IGraph<T> graph) Parameters Type Name Description IGraph <T> graph Returns Type Description List < MSTEdge <T, W>> List of MST edges"
  },
  "api/Advanced.Algorithms.Graph.MatchEdge-1.html": {
    "href": "api/Advanced.Algorithms.Graph.MatchEdge-1.html",
    "title": "Class MatchEdge<T> | Advanced Algorithms",
    "keywords": "Class MatchEdge<T> The match result object. Inheritance Object MatchEdge<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class MatchEdge<T> Type Parameters Name Description T Constructors MatchEdge(T, T) Declaration public MatchEdge(T source, T target) Parameters Type Name Description T source T target Properties Source Declaration public T Source { get; } Property Value Type Description T Target Declaration public T Target { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.Graph.MColorer-2.html": {
    "href": "api/Advanced.Algorithms.Graph.MColorer-2.html",
    "title": "Class MColorer<T, C> | Advanced Algorithms",
    "keywords": "Class MColorer<T, C> An m-coloring algorithm implementation. Inheritance Object MColorer<T, C> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class MColorer<T, C> Type Parameters Name Description T C Methods Color(IGraph<T>, C[]) Returns true if all vertices can be colored using the given colors in such a way so that no neighbours have same color. Declaration public MColorResult<T, C> Color(IGraph<T> graph, C[] colors) Parameters Type Name Description IGraph <T> graph C[] colors Returns Type Description MColorResult <T, C>"
  },
  "api/Advanced.Algorithms.Graph.MColorResult-2.html": {
    "href": "api/Advanced.Algorithms.Graph.MColorResult-2.html",
    "title": "Class MColorResult<T, C> | Advanced Algorithms",
    "keywords": "Class MColorResult<T, C> M-coloring result object. Inheritance Object MColorResult<T, C> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class MColorResult<T, C> Type Parameters Name Description T C Constructors MColorResult(Boolean, Dictionary<C, List<T>>) Declaration public MColorResult(bool canColor, Dictionary<C, List<T>> partitions) Parameters Type Name Description Boolean canColor Dictionary <C, List <T>> partitions Properties CanColor Declaration public bool CanColor { get; } Property Value Type Description Boolean Partitions Declaration public Dictionary<C, List<T>> Partitions { get; } Property Value Type Description Dictionary <C, List <T>>"
  },
  "api/Advanced.Algorithms.Graph.MinCut-2.html": {
    "href": "api/Advanced.Algorithms.Graph.MinCut-2.html",
    "title": "Class MinCut<T, W> | Advanced Algorithms",
    "keywords": "Class MinCut<T, W> Compute minimum cut edges of given graph using Edmond-Karps improved Ford-Fulkerson Max Flow Algorithm. Inheritance Object MinCut<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class MinCut<T, W> where W : IComparable Type Parameters Name Description T W Constructors MinCut(IFlowOperators<W>) Declaration public MinCut(IFlowOperators<W> operator) Parameters Type Name Description IFlowOperators <W> operator Methods ComputeMinCut(IDiGraph<T>, T, T) Declaration public List<MinCutEdge<T>> ComputeMinCut(IDiGraph<T> graph, T source, T sink) Parameters Type Name Description IDiGraph <T> graph T source T sink Returns Type Description List < MinCutEdge <T>>"
  },
  "api/Advanced.Algorithms.Graph.MinCutEdge-1.html": {
    "href": "api/Advanced.Algorithms.Graph.MinCutEdge-1.html",
    "title": "Class MinCutEdge<T> | Advanced Algorithms",
    "keywords": "Class MinCutEdge<T> Minimum cut result object. Inheritance Object MinCutEdge<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class MinCutEdge<T> Type Parameters Name Description T Constructors MinCutEdge(T, T) Declaration public MinCutEdge(T source, T dest) Parameters Type Name Description T source T dest Properties Destination Declaration public T Destination { get; } Property Value Type Description T Source Declaration public T Source { get; } Property Value Type Description T"
  },
  "api/Advanced.Algorithms.Graph.MinVertexCover-1.html": {
    "href": "api/Advanced.Algorithms.Graph.MinVertexCover-1.html",
    "title": "Class MinVertexCover<T> | Advanced Algorithms",
    "keywords": "Class MinVertexCover<T> A minimum vertex conver algorithm implementation. Inheritance Object MinVertexCover<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class MinVertexCover<T> Type Parameters Name Description T Methods GetMinVertexCover(IGraph<T>) Declaration public List<IGraphVertex<T>> GetMinVertexCover(IGraph<T> graph) Parameters Type Name Description IGraph <T> graph Returns Type Description List < IGraphVertex <T>>"
  },
  "api/Advanced.Algorithms.Graph.MSTEdge-2.html": {
    "href": "api/Advanced.Algorithms.Graph.MSTEdge-2.html",
    "title": "Class MSTEdge<T, W> | Advanced Algorithms",
    "keywords": "Class MSTEdge<T, W> Minimum spanning tree edge object. Inheritance Object MSTEdge<T, W> Implements IComparable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class MSTEdge<T, W> : IComparable where W : IComparable Type Parameters Name Description T W Properties Destination Declaration public T Destination { get; } Property Value Type Description T Source Declaration public T Source { get; } Property Value Type Description T Weight Declaration public W Weight { get; } Property Value Type Description W Methods CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Implements System.IComparable"
  },
  "api/Advanced.Algorithms.Graph.Prims-2.html": {
    "href": "api/Advanced.Algorithms.Graph.Prims-2.html",
    "title": "Class Prims<T, W> | Advanced Algorithms",
    "keywords": "Class Prims<T, W> A Prims algorithm implementation. Inheritance Object Prims<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class Prims<T, W> where W : IComparable Type Parameters Name Description T W Methods FindMinimumSpanningTree(IGraph<T>) Find Minimum Spanning Tree of given undirected graph. Declaration public List<MSTEdge<T, W>> FindMinimumSpanningTree(IGraph<T> graph) Parameters Type Name Description IGraph <T> graph Returns Type Description List < MSTEdge <T, W>> List of MST edges"
  },
  "api/Advanced.Algorithms.Graph.PushRelabelMaxFlow-2.html": {
    "href": "api/Advanced.Algorithms.Graph.PushRelabelMaxFlow-2.html",
    "title": "Class PushRelabelMaxFlow<T, W> | Advanced Algorithms",
    "keywords": "Class PushRelabelMaxFlow<T, W> A Push-Relabel algorithm implementation. Inheritance Object PushRelabelMaxFlow<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class PushRelabelMaxFlow<T, W> where W : IComparable Type Parameters Name Description T W Constructors PushRelabelMaxFlow(IFlowOperators<W>) Declaration public PushRelabelMaxFlow(IFlowOperators<W> operator) Parameters Type Name Description IFlowOperators <W> operator Methods ComputeMaxFlow(IDiGraph<T>, T, T) Computes Max Flow using Push-Relabel algorithm. Declaration public W ComputeMaxFlow(IDiGraph<T> graph, T source, T sink) Parameters Type Name Description IDiGraph <T> graph T source T sink Returns Type Description W"
  },
  "api/Advanced.Algorithms.Graph.ShortestPathResult-2.html": {
    "href": "api/Advanced.Algorithms.Graph.ShortestPathResult-2.html",
    "title": "Class ShortestPathResult<T, W> | Advanced Algorithms",
    "keywords": "Class ShortestPathResult<T, W> Shortest path result object. Inheritance Object ShortestPathResult<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class ShortestPathResult<T, W> where W : IComparable Type Parameters Name Description T W Constructors ShortestPathResult(List<T>, W) Declaration public ShortestPathResult(List<T> path, W length) Parameters Type Name Description List <T> path W length Properties Length Declaration public W Length { get; } Property Value Type Description W Path Declaration public List<T> Path { get; } Property Value Type Description List <T>"
  },
  "api/Advanced.Algorithms.Graph.TarjansArticulationFinder-1.html": {
    "href": "api/Advanced.Algorithms.Graph.TarjansArticulationFinder-1.html",
    "title": "Class TarjansArticulationFinder<T> | Advanced Algorithms",
    "keywords": "Class TarjansArticulationFinder<T> Articulation point finder using Tarjan's algorithm. Inheritance Object TarjansArticulationFinder<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class TarjansArticulationFinder<T> Type Parameters Name Description T Methods FindArticulationPoints(IGraph<T>) Returns a list if articulation points in this graph. Declaration public List<T> FindArticulationPoints(IGraph<T> graph) Parameters Type Name Description IGraph <T> graph Returns Type Description List <T>"
  },
  "api/Advanced.Algorithms.Graph.TarjansBiConnected-1.html": {
    "href": "api/Advanced.Algorithms.Graph.TarjansBiConnected-1.html",
    "title": "Class TarjansBiConnected<T> | Advanced Algorithms",
    "keywords": "Class TarjansBiConnected<T> Finds if a graph is BiConnected. Inheritance Object TarjansBiConnected<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class TarjansBiConnected<T> Type Parameters Name Description T Methods IsBiConnected(IGraph<T>) This is using ariticulation alogrithm based on the observation that a graph is BiConnected if and only if there is no articulation Points. Declaration public bool IsBiConnected(IGraph<T> graph) Parameters Type Name Description IGraph <T> graph Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Graph.TarjansBridgeFinder-1.html": {
    "href": "api/Advanced.Algorithms.Graph.TarjansBridgeFinder-1.html",
    "title": "Class TarjansBridgeFinder<T> | Advanced Algorithms",
    "keywords": "Class TarjansBridgeFinder<T> Bridge finder using Tarjan's algorithm. Inheritance Object TarjansBridgeFinder<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class TarjansBridgeFinder<T> Type Parameters Name Description T Methods FindBridges(IGraph<T>) Returns a list if Bridge points in this graph. Declaration public List<Bridge<T>> FindBridges(IGraph<T> graph) Parameters Type Name Description IGraph <T> graph Returns Type Description List < Bridge <T>>"
  },
  "api/Advanced.Algorithms.Graph.TarjansStronglyConnected-1.html": {
    "href": "api/Advanced.Algorithms.Graph.TarjansStronglyConnected-1.html",
    "title": "Class TarjansStronglyConnected<T> | Advanced Algorithms",
    "keywords": "Class TarjansStronglyConnected<T> Strongly connected using Tarjan's algorithm. Inheritance Object TarjansStronglyConnected<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class TarjansStronglyConnected<T> Type Parameters Name Description T Methods FindStronglyConnectedComponents(IDiGraph<T>) Rreturns a list of Strongly Connected components in this graph. Declaration public List<List<T>> FindStronglyConnectedComponents(IDiGraph<T> graph) Parameters Type Name Description IDiGraph <T> graph Returns Type Description List < List <T>>"
  },
  "api/Advanced.Algorithms.Graph.TravellingSalesman-2.html": {
    "href": "api/Advanced.Algorithms.Graph.TravellingSalesman-2.html",
    "title": "Class TravellingSalesman<T, W> | Advanced Algorithms",
    "keywords": "Class TravellingSalesman<T, W> Uses dynamic programming for a psuedo-polynomial time runTime complexity for this NP hard problem. Inheritance Object TravellingSalesman<T, W> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Graph Assembly : Advanced.Algorithms.dll Syntax public class TravellingSalesman<T, W> where W : IComparable Type Parameters Name Description T W Methods FindMinWeight(IGraph<T>, IShortestPathOperators<W>) Declaration public W FindMinWeight(IGraph<T> graph, IShortestPathOperators<W> operator) Parameters Type Name Description IGraph <T> graph IShortestPathOperators <W> operator Returns Type Description W"
  },
  "api/Advanced.Algorithms.html": {
    "href": "api/Advanced.Algorithms.html",
    "title": "Namespace Advanced.Algorithms | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms Enums SortDirection"
  },
  "api/Advanced.Algorithms.Numerical.FastExponentiation.html": {
    "href": "api/Advanced.Algorithms.Numerical.FastExponentiation.html",
    "title": "Class FastExponentiation | Advanced Algorithms",
    "keywords": "Class FastExponentiation A fast exponentiation algorithm implementation. Inheritance Object FastExponentiation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Numerical Assembly : Advanced.Algorithms.dll Syntax public class FastExponentiation Methods BySquaring(Int32, Int32) Computes exponentiation using squaring. Declaration public static int BySquaring(int base, int power) Parameters Type Name Description Int32 base Int32 power Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Numerical.html": {
    "href": "api/Advanced.Algorithms.Numerical.html",
    "title": "Namespace Advanced.Algorithms.Numerical | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Numerical Classes FastExponentiation A fast exponentiation algorithm implementation. PrimeGenerator A prime number generation algorithm using Sieve of Eratosthenes. PrimeTester Tests for Prime in School method optimized."
  },
  "api/Advanced.Algorithms.Numerical.PrimeGenerator.html": {
    "href": "api/Advanced.Algorithms.Numerical.PrimeGenerator.html",
    "title": "Class PrimeGenerator | Advanced Algorithms",
    "keywords": "Class PrimeGenerator A prime number generation algorithm using Sieve of Eratosthenes. Inheritance Object PrimeGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Numerical Assembly : Advanced.Algorithms.dll Syntax public class PrimeGenerator Methods GetAllPrimes(Int32) Declaration public static List<int> GetAllPrimes(int max) Parameters Type Name Description Int32 max Returns Type Description List < Int32 >"
  },
  "api/Advanced.Algorithms.Numerical.PrimeTester.html": {
    "href": "api/Advanced.Algorithms.Numerical.PrimeTester.html",
    "title": "Class PrimeTester | Advanced Algorithms",
    "keywords": "Class PrimeTester Tests for Prime in School method optimized. Inheritance Object PrimeTester Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Numerical Assembly : Advanced.Algorithms.dll Syntax public class PrimeTester Methods IsPrime(Int32) Check if given number is prime. Declaration public static bool IsPrime(int number) Parameters Type Name Description Int32 number Returns Type Description Boolean"
  },
  "api/Advanced.Algorithms.Search.BinarySearch.html": {
    "href": "api/Advanced.Algorithms.Search.BinarySearch.html",
    "title": "Class BinarySearch | Advanced Algorithms",
    "keywords": "Class BinarySearch A binary search algorithm implementation. Inheritance Object BinarySearch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Search Assembly : Advanced.Algorithms.dll Syntax public class BinarySearch Methods Search(Int32[], Int32) Declaration public static int Search(int[] input, int element) Parameters Type Name Description Int32 [] input Int32 element Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.Search.BoyerMoore-1.html": {
    "href": "api/Advanced.Algorithms.Search.BoyerMoore-1.html",
    "title": "Class BoyerMoore<T> | Advanced Algorithms",
    "keywords": "Class BoyerMoore<T> A boyer-moore majority finder algorithm implementation. Inheritance Object BoyerMoore<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Search Assembly : Advanced.Algorithms.dll Syntax public class BoyerMoore<T> where T : IComparable Type Parameters Name Description T Methods FindMajority(IEnumerable<T>) Declaration public static T FindMajority(IEnumerable<T> input) Parameters Type Name Description IEnumerable <T> input Returns Type Description T"
  },
  "api/Advanced.Algorithms.Search.html": {
    "href": "api/Advanced.Algorithms.Search.html",
    "title": "Namespace Advanced.Algorithms.Search | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Search Classes BinarySearch A binary search algorithm implementation. BoyerMoore<T> A boyer-moore majority finder algorithm implementation. QuickSelect<T> A quick select for Kth smallest algorithm implementation."
  },
  "api/Advanced.Algorithms.Search.QuickSelect-1.html": {
    "href": "api/Advanced.Algorithms.Search.QuickSelect-1.html",
    "title": "Class QuickSelect<T> | Advanced Algorithms",
    "keywords": "Class QuickSelect<T> A quick select for Kth smallest algorithm implementation. Inheritance Object QuickSelect<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Search Assembly : Advanced.Algorithms.dll Syntax public class QuickSelect<T> where T : IComparable Type Parameters Name Description T Methods FindSmallest(IEnumerable<T>, Int32) Declaration public static T FindSmallest(IEnumerable<T> input, int k) Parameters Type Name Description IEnumerable <T> input Int32 k Returns Type Description T"
  },
  "api/Advanced.Algorithms.SortDirection.html": {
    "href": "api/Advanced.Algorithms.SortDirection.html",
    "title": "Enum SortDirection | Advanced Algorithms",
    "keywords": "Enum SortDirection Namespace : Advanced.Algorithms Assembly : Advanced.Algorithms.dll Syntax public enum SortDirection Fields Name Description Ascending Descending"
  },
  "api/Advanced.Algorithms.Sorting.BubbleSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.BubbleSort-1.html",
    "title": "Class BubbleSort<T> | Advanced Algorithms",
    "keywords": "Class BubbleSort<T> A bubble sort implementation. Inheritance Object BubbleSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class BubbleSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[], SortDirection) Time complexity: O(n^2). Declaration public static T[] Sort(T[] array, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description T[] array SortDirection sortDirection Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.BucketSort.html": {
    "href": "api/Advanced.Algorithms.Sorting.BucketSort.html",
    "title": "Class BucketSort | Advanced Algorithms",
    "keywords": "Class BucketSort A bucket sort implementation. Inheritance Object BucketSort Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class BucketSort Methods Sort(Int32[], Int32, SortDirection) Sort given integers using bucket sort with merge sort as sub sort. Declaration public static int[] Sort(int[] array, int bucketSize, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description Int32 [] array Int32 bucketSize SortDirection sortDirection Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.Sorting.CountingSort.html": {
    "href": "api/Advanced.Algorithms.Sorting.CountingSort.html",
    "title": "Class CountingSort | Advanced Algorithms",
    "keywords": "Class CountingSort A counting sort implementation. Inheritance Object CountingSort Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class CountingSort Methods Sort(IEnumerable<Int32>, SortDirection) Sort given integers. Declaration public static int[] Sort(IEnumerable<int> enumerable, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description IEnumerable < Int32 > enumerable SortDirection sortDirection Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.Sorting.HeapSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.HeapSort-1.html",
    "title": "Class HeapSort<T> | Advanced Algorithms",
    "keywords": "Class HeapSort<T> A heap sort implementation. Inheritance Object HeapSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class HeapSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(ICollection<T>, SortDirection) Time complexity: O(nlog(n)). Declaration public static T[] Sort(ICollection<T> collection, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description ICollection <T> collection SortDirection sortDirection Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.html": {
    "href": "api/Advanced.Algorithms.Sorting.html",
    "title": "Namespace Advanced.Algorithms.Sorting | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.Sorting Classes BubbleSort<T> A bubble sort implementation. BucketSort A bucket sort implementation. CountingSort A counting sort implementation. HeapSort<T> A heap sort implementation. InsertionSort<T> An insertion sort implementation. MergeSort<T> A merge sort implementation. QuickSort<T> A quick sort implementation. RadixSort A radix sort implementation. SelectionSort<T> A selection sort implementation. ShellSort<T> A shell sort implementation. TreeSort<T> A tree sort implementation."
  },
  "api/Advanced.Algorithms.Sorting.InsertionSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.InsertionSort-1.html",
    "title": "Class InsertionSort<T> | Advanced Algorithms",
    "keywords": "Class InsertionSort<T> An insertion sort implementation. Inheritance Object InsertionSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class InsertionSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[], SortDirection) Time complexity: O(n^2). Declaration public static T[] Sort(T[] array, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description T[] array SortDirection sortDirection Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.MergeSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.MergeSort-1.html",
    "title": "Class MergeSort<T> | Advanced Algorithms",
    "keywords": "Class MergeSort<T> A merge sort implementation. Inheritance Object MergeSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class MergeSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[], SortDirection) Time complexity: O(nlog(n)). Declaration public static T[] Sort(T[] array, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description T[] array SortDirection sortDirection Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.QuickSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.QuickSort-1.html",
    "title": "Class QuickSort<T> | Advanced Algorithms",
    "keywords": "Class QuickSort<T> A quick sort implementation. Inheritance Object QuickSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class QuickSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[], SortDirection) Time complexity: O(n^2) Declaration public static T[] Sort(T[] array, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description T[] array SortDirection sortDirection Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.RadixSort.html": {
    "href": "api/Advanced.Algorithms.Sorting.RadixSort.html",
    "title": "Class RadixSort | Advanced Algorithms",
    "keywords": "Class RadixSort A radix sort implementation. Inheritance Object RadixSort Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class RadixSort Methods Sort(Int32[], SortDirection) Declaration public static int[] Sort(int[] array, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description Int32 [] array SortDirection sortDirection Returns Type Description Int32 []"
  },
  "api/Advanced.Algorithms.Sorting.SelectionSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.SelectionSort-1.html",
    "title": "Class SelectionSort<T> | Advanced Algorithms",
    "keywords": "Class SelectionSort<T> A selection sort implementation. Inheritance Object SelectionSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class SelectionSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[], SortDirection) Time complexity: O(n^2). Declaration public static T[] Sort(T[] array, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description T[] array SortDirection sortDirection Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.ShellSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.ShellSort-1.html",
    "title": "Class ShellSort<T> | Advanced Algorithms",
    "keywords": "Class ShellSort<T> A shell sort implementation. Inheritance Object ShellSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class ShellSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(T[], SortDirection) Declaration public static T[] Sort(T[] array, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description T[] array SortDirection sortDirection Returns Type Description T[]"
  },
  "api/Advanced.Algorithms.Sorting.TreeSort-1.html": {
    "href": "api/Advanced.Algorithms.Sorting.TreeSort-1.html",
    "title": "Class TreeSort<T> | Advanced Algorithms",
    "keywords": "Class TreeSort<T> A tree sort implementation. Inheritance Object TreeSort<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.Sorting Assembly : Advanced.Algorithms.dll Syntax public class TreeSort<T> where T : IComparable Type Parameters Name Description T Methods Sort(IEnumerable<T>, SortDirection) Time complexity: O(nlog(n)). Declaration public static IEnumerable<T> Sort(IEnumerable<T> enumerable, SortDirection sortDirection = SortDirection.Ascending) Parameters Type Name Description IEnumerable <T> enumerable SortDirection sortDirection Returns Type Description IEnumerable <T>"
  },
  "api/Advanced.Algorithms.String.html": {
    "href": "api/Advanced.Algorithms.String.html",
    "title": "Namespace Advanced.Algorithms.String | Advanced Algorithms",
    "keywords": "Namespace Advanced.Algorithms.String Classes KMP Knuth–Morris–Pratt(KMP) string search implementation. ManachersPalindrome A Manacher's longest palindrome implementation. RabinKarp A Rabin-Karp string search implementation. ZAlgorithm A Z-algorithm implementation for string search."
  },
  "api/Advanced.Algorithms.String.KMP.html": {
    "href": "api/Advanced.Algorithms.String.KMP.html",
    "title": "Class KMP | Advanced Algorithms",
    "keywords": "Class KMP Knuth–Morris–Pratt(KMP) string search implementation. Inheritance Object KMP Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String Assembly : Advanced.Algorithms.dll Syntax public class KMP Methods Search(String, String) Returns the start index of first appearance of pattern in input string. Returns -1 if no match. Declaration public int Search(string input, string pattern) Parameters Type Name Description String input String pattern Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.String.ManachersPalindrome.html": {
    "href": "api/Advanced.Algorithms.String.ManachersPalindrome.html",
    "title": "Class ManachersPalindrome | Advanced Algorithms",
    "keywords": "Class ManachersPalindrome A Manacher's longest palindrome implementation. Inheritance Object ManachersPalindrome Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String Assembly : Advanced.Algorithms.dll Syntax public class ManachersPalindrome Methods FindLongestPalindrome(String) Declaration public int FindLongestPalindrome(string input) Parameters Type Name Description String input Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.String.RabinKarp.html": {
    "href": "api/Advanced.Algorithms.String.RabinKarp.html",
    "title": "Class RabinKarp | Advanced Algorithms",
    "keywords": "Class RabinKarp A Rabin-Karp string search implementation. Inheritance Object RabinKarp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String Assembly : Advanced.Algorithms.dll Syntax public class RabinKarp Methods Search(String, String) Declaration public int Search(string input, string pattern) Parameters Type Name Description String input String pattern Returns Type Description Int32"
  },
  "api/Advanced.Algorithms.String.ZAlgorithm.html": {
    "href": "api/Advanced.Algorithms.String.ZAlgorithm.html",
    "title": "Class ZAlgorithm | Advanced Algorithms",
    "keywords": "Class ZAlgorithm A Z-algorithm implementation for string search. Inheritance Object ZAlgorithm Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Advanced.Algorithms.String Assembly : Advanced.Algorithms.dll Syntax public class ZAlgorithm Methods Search(String, String) Returns the start index of first appearance of pattern in input string. returns -1 if no match. Declaration public int Search(string input, string pattern) Parameters Type Name Description String input String pattern Returns Type Description Int32"
  }
}
